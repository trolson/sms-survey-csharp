<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bandwidth.Net</name>
    </assembly>
    <members>
        <member name="T:Bandwidth.Net.ApiV2.CallbackEvent">
            <summary>
              Catapult Api callback event
            </summary>
            <example>
            <code>
            var callbackEvent = CallbackEvent.CreateFromJson("{\"type\": \"message-received\"}");
            switch(callbackEvent.Type)
            {
              case CallbackEventType.MessageReceived:
                Console.WriteLine($"Sms {callbackEvent.Message.From} -> {string.Join(", ", callbackEvent.Message.To)}: {callbackEvent.Message.Text}");
                break;
            }
            </code>
            </example>
        </member>
        <member name="P:Bandwidth.Net.ApiV2.CallbackEvent.Type">
            <summary>
              Event type
            </summary>
        </member>
        <member name="P:Bandwidth.Net.ApiV2.CallbackEvent.Time">
            <summary>
              Event time
            </summary>
        </member>
        <member name="P:Bandwidth.Net.ApiV2.CallbackEvent.Description">
            <summary>
              Event description
            </summary>
        </member>
        <member name="P:Bandwidth.Net.ApiV2.CallbackEvent.To">
            <summary>
              Event target phone number
            </summary>
        </member>
        <member name="P:Bandwidth.Net.ApiV2.CallbackEvent.Message">
            <summary>
              Message data
            </summary>
        </member>
        <member name="P:Bandwidth.Net.ApiV2.CallbackEvent.ReplyTo">
            <summary>
              Phone numbers for answer
            </summary>
        </member>
        <member name="M:Bandwidth.Net.ApiV2.CallbackEvent.CreateFromJson(System.String)">
            <summary>
              Parse callback eevent data from JSON
            </summary>
        </member>
        <member name="T:Bandwidth.Net.ApiV2.IncomingMessage">
            <summary>
              Incoming message
            </summary>
        </member>
        <member name="P:Bandwidth.Net.ApiV2.IncomingMessage.ReplyTo">
            <summary>
              Phone numbers for answer
            </summary>
        </member>
        <member name="T:Bandwidth.Net.ApiV2.CallbackEventType">
            <summary>
              Possible event types
            </summary>
        </member>
        <member name="F:Bandwidth.Net.ApiV2.CallbackEventType.Unknown">
            <summary>
              Unknown type
            </summary>
        </member>
        <member name="F:Bandwidth.Net.ApiV2.CallbackEventType.MessageReceived">
            <summary>
              Message received
            </summary>
        </member>
        <member name="F:Bandwidth.Net.ApiV2.CallbackEventType.MessageSent">
            <summary>
              Message sent
            </summary>
        </member>
        <member name="F:Bandwidth.Net.ApiV2.CallbackEventType.MessageDelivered">
            <summary>
              Message delivered
            </summary>
        </member>
        <member name="F:Bandwidth.Net.ApiV2.CallbackEventType.MessageRejectedForbiddenCountry">
            <summary>
              Message rejected forbidden country
            </summary>
        </member>
        <member name="T:Bandwidth.Net.ApiV2.IMessage">
            <summary>
              Access to Message Api
            </summary>
        </member>
        <member name="M:Bandwidth.Net.ApiV2.IMessage.SendAsync(Bandwidth.Net.ApiV2.MessageData,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Send a message.
            </summary>
            <param name="data">Parameters of new message</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Created message</returns>
            <example>
              <code>
            var message = await client.V2.Message.SendAsync(new MessageData{ From = "from", To = new[] {"to"}, Text = "Hello"});
            </code>
            </example>
        </member>
        <member name="T:Bandwidth.Net.ApiV2.MessageData">
            <summary>
              Parameters to send an message
            </summary>
        </member>
        <member name="P:Bandwidth.Net.ApiV2.MessageData.From">
            <summary>
            The message sender's telephone number (or short code).
            </summary>
        </member>
        <member name="P:Bandwidth.Net.ApiV2.MessageData.To">
            <summary>
            Message recipient telephone number (or short code).
            </summary>
        </member>
        <member name="P:Bandwidth.Net.ApiV2.MessageData.Text">
            <summary>
            The message contents.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.ApiV2.MessageData.Media">
            <summary>
            Array containing list of media urls to be sent as content for an mms.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.ApiV2.MessageData.Tag">
            <summary>
            The complete URL where the events related to the outgoing message will be sent.
            </summary>
        </member>
        <member name="T:Bandwidth.Net.ApiV2.Message">
            <summary>
            Rsult of batch send of some messages
            </summary>
        </member>
        <member name="P:Bandwidth.Net.ApiV2.Message.Id">
            <summary>
            Id of the message
            </summary>
        </member>
        <member name="P:Bandwidth.Net.ApiV2.Message.From">
            <summary>
            The message sender's telephone number (or short code).
            </summary>
        </member>
        <member name="P:Bandwidth.Net.ApiV2.Message.To">
            <summary>
            Message recipient telephone number (or short code).
            </summary>
        </member>
        <member name="P:Bandwidth.Net.ApiV2.Message.Text">
            <summary>
            The message contents.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.ApiV2.Message.Media">
            <summary>
            Array containing list of media urls to be sent as content for an mms.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.ApiV2.Message.Tag">
            <summary>
            The complete URL where the events related to the outgoing message will be sent.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.ApiV2.Message.Owner">
            <summary>
            The message owner
            </summary>
        </member>
        <member name="P:Bandwidth.Net.ApiV2.Message.Direction">
            <summary>
            Direction of the message
            </summary>
        </member>
        <member name="P:Bandwidth.Net.ApiV2.Message.Time">
            <summary>
            The message creation time
            </summary>
        </member>
        <member name="T:Bandwidth.Net.ApiV2.MessageDirection">
            <summary>
            Directions of message
            </summary>
        </member>
        <member name="F:Bandwidth.Net.ApiV2.MessageDirection.In">
            <summary>
            A message that came from the telephone network to one of your numbers (an "inbound" message)
            </summary>
        </member>
        <member name="F:Bandwidth.Net.ApiV2.MessageDirection.Out">
            <summary>
            A message that was sent from one of your numbers to the telephone network (an "outbound" message)
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.IAccount">
            <summary>
            Access to Account Api
            </summary>
        </member>
        <member name="M:Bandwidth.Net.Api.IAccount.GetAsync(System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Get information about account
            </summary>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Task with <see cref="T:Bandwidth.Net.Api.Account"/> Account instance</returns>
            <example>
            <code>
            var account = await client.Account.Get();
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.IAccount.GetTransactions(Bandwidth.Net.Api.AccountTransactionQuery,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Get a list of the transactions made to account
            </summary>
            <param name="query">Optional query parameters</param>
            <param name="cancellationToken">>Optional token to cancel async operation</param>
            <returns>Collection with <see cref="T:Bandwidth.Net.Api.AccountTransaction"/> instances</returns>
            <example>
            <code>
            var transactions = client.Account.GetTransactions();
            </code>
            </example>
        </member>
        <member name="T:Bandwidth.Net.Api.Account">
            <summary>
            Account information
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Account.Balance">
            <summary>
            Account balance in dollars, as a string; the currency symbol is not included.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Account.AccountType">
            <summary>
            The type of account configured foruser
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.AccountTransactionQuery">
            <summary>
            Query to get account transactions
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.AccountTransactionQuery.MaxItems">
            <summary>
            Limit the number of transactions that will be returned.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.AccountTransactionQuery.ToDate">
            <summary>
            Return only transactions that are newer than the parameter
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.AccountTransactionQuery.FromDate">
            <summary>
            Return only transactions that are older than the parameter
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.AccountTransactionQuery.Type">
            <summary>
            Return only transactions that are this type.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.AccountTransactionQuery.Number">
            <summary>
            Return only transactions that are from the specified number
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.AccountTransactionQuery.Size">
            <summary>
            Used for pagination to indicate the size of each page requested for querying a list of transactions. If no value is specified the default value is 25 (maximum value 1000).
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.AccountTransaction">
            <summary>
            Account transaction
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.AccountTransaction.Id">
            <summary>
            The unique identifier for the transaction.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.AccountTransaction.Time">
            <summary>
            The time the transaction was processed.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.AccountTransaction.Amount">
            <summary>
            The transaction amount in dollars, as a string; the currency symbol is not included.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.AccountTransaction.Type">
            <summary>
            The type of transaction.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.AccountTransaction.Units">
            <summary>
            The number of product units the transaction charged or credited.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.AccountTransaction.Number">
            <summary>
            The phone number the transaction was related to (not all transactions are related to a phone number).
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.AccountTransaction.ProductType">
            <summary>
            The product the transaction was related to (not all transactions are related to a product).
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.AccountType">
            <summary>
            Account types
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.AccountType.PrePay">
            <summary>
            The type of account where you increase your available balance with credit card payments.
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.AccountTransactionType">
            <summary>
            Account transaction types
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.AccountTransactionType.Charge">
            <summary>
            A charge for the use of a service or resource (for example, phone calls, SMS messages, phone numbers).
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.AccountTransactionType.Payment">
            <summary>
            A payment you made to increase your account balance.
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.AccountTransactionType.Credit">
            <summary>
            An increase to your account balance that you did not pay for (for example, an initial account credit or promotion).
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.AccountTransactionType.AutoRecharge">
            <summary>
            An automated payment made to keep your account balance above the minimum balance you configured.
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.ProductType">
            <summary>
            Product types
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.ProductType.LocalNumberPerMonth">
            <summary>
            The monthly charge for a local phone number.
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.ProductType.TollFreeNumberPerMonth">
            <summary>
            The monthly charge for a toll-free phone number.
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.ProductType.SmsIn">
            <summary>
            A SMS message that came in to one of your numbers.
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.ProductType.SmsOut">
            <summary>
            A SMS message that was sent outbound one of your numbers.
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.ProductType.MmsIn">
            <summary>
            A MMS message that was sent to one of your numbers.
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.ProductType.MmsOut">
            <summary>
            A MMS message that was sent outbound one of your numbers.
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.ProductType.CallIn">
            <summary>
            An inbound phone call to one of your numbers.
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.ProductType.CallOut">
            <summary>
            An outbound phone call that was created by your app.
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.ProductType.SipCallIn">
            <summary>
            A phone call that came inbound via SIP to one of your registered endpoints.
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.ProductType.SipCallOut">
            <summary>
            A phone call made outbound to a SIP address.
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.ProductType.Transcription">
            <summary>
            A transcription of a recorded call.
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.ProductType.CnamSearch">
            <summary>
            A CNAM lookup request for a phone number.
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.ProductType.ToolFreeNumberPerMonth">
            <summary>
            Toll Free DID
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.ProductType.SmsWShortcodes">
            <summary>
            SMS Short Code Outbound
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.ProductType.SmsInTollFree">
            <summary>
            Toll Free SMS Inbound
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.ProductType.SmsOutTollFree">
            <summary>
            Toll Free SMS Outbound
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.ProductType.Portin">
            <summary>
            Port In
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.ProductType.ImportedNumber">
            <summary>
            Imported Number
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.IApplication">
            <summary>
              Access to Application Api
            </summary>
        </member>
        <member name="M:Bandwidth.Net.Api.IApplication.List(Bandwidth.Net.Api.ApplicationQuery,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Get a list of applications
            </summary>
            <param name="query">Optional query parameters</param>
            <param name="cancellationToken">>Optional token to cancel async operation</param>
            <returns>Collection with <see cref="T:Bandwidth.Net.Api.Application" /> instances</returns>
            <example>
            <code>
            var applications = client.Application.List(); // get access to all applications of user
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.IApplication.CreateAsync(Bandwidth.Net.Api.CreateApplicationData,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Create an application that can handle calls and messages for one of your phone number.
            </summary>
            <param name="data">Parameters of new application</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Created application Id</returns>
            <example>
            <code>
            var applicationId = await client.Application.CreateAsync(new CreateApplicationData{ Name = "MyApp"});
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.IApplication.GetAsync(System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Get information about an application
            </summary>
            <param name="applicationId">Id of application to get</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Task with <see cref="T:Bandwidth.Net.Api.Application" />Application instance</returns>
            <example>
            <code>
            var application = await client.Application.GetAsync("applicationId");
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.IApplication.UpdateAsync(System.String,Bandwidth.Net.Api.UpdateApplicationData,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Update an application
            </summary>
            <param name="applicationId">Id of application to change</param>
            <param name="data">Changed data</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Task instance for async operation</returns>
            <example>
            <code>
            await client.Application.UpdateAsync("applicationId", new UpdateApplicationData {Name = "NewName"});
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.IApplication.DeleteAsync(System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Delete an application
            </summary>
            <param name="applicationId">Id of application to change</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Task instance for async operation</returns>
            <example>
            <code>
            await client.Application.DeleteAsync("applicationId");
            </code>
            </example>
        </member>
        <member name="T:Bandwidth.Net.Api.Application">
            <summary>
              Application information
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Application.Id">
            <summary>
              The unique identifier for the application.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Application.Name">
            <summary>
              A name you choose for this application.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Application.IncomingCallUrl">
            <summary>
              A URL where call events will be sent for an inbound call. This is the endpoint where the Application Platform will
              send all call events. Either incomingCallUrl or incomingMessageUrl is required.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Application.IncomingCallUrlCallbackTimeout">
            <summary>
              Determine how long should the platform wait for incomingCallUrl's response before timing out in milliseconds.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Application.IncomingCallFallbackUrl">
            <summary>
              The URL used to send the callback event if the request to incomingCallUrl fails.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Application.IncomingMessageUrl">
            <summary>
              A URL where message events will be sent for an inbound message.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Application.IncomingMessageUrlCallbackTimeout">
            <summary>
              Determine how long should the platform wait for incomingMessageUrl's response before timing out in milliseconds.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Application.IncomingMessageFallbackUrl">
            <summary>
              The URL used to send the callback event if the request to incomingMessageUrl fails.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Application.CallbackHttpMethod">
            <summary>
              Determine if the callback event should be sent via HTTP GET or HTTP POST
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Application.AutoAnswer">
            <summary>
              Determines whether or not an incoming call should be automatically answered.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Application.MessageApiVersion">
            <summary>
              Message API version to use. 
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.ApplicationQuery">
            <summary>
              Query to get applications
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.ApplicationQuery.Size">
            <summary>
              Used for pagination to indicate the size of each page requested for querying a list of applications. If no value is
              specified the default value is 25 (maximum value 1000).
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.CreateApplicationData">
            <summary>
              Parameters to create an application
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateApplicationData.Name">
            <summary>
              A name you choose for this application.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateApplicationData.IncomingCallUrl">
            <summary>
              A URL where call events will be sent for an inbound call. This is the endpoint where the Application Platform will
              send all call events. Either incomingCallUrl or incomingMessageUrl is required.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateApplicationData.IncomingCallUrlCallbackTimeout">
            <summary>
              Determine how long should the platform wait for incomingCallUrl's response before timing out in milliseconds.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateApplicationData.IncomingCallFallbackUrl">
            <summary>
              The URL used to send the callback event if the request to incomingCallUrl fails.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateApplicationData.IncomingMessageUrl">
            <summary>
              A URL where message events will be sent for an inbound message.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateApplicationData.IncomingMessageUrlCallbackTimeout">
            <summary>
              Determine how long should the platform wait for incomingMessageUrl's response before timing out in milliseconds.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateApplicationData.IncomingMessageFallbackUrl">
            <summary>
              The URL used to send the callback event if the request to incomingMessageUrl fails.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateApplicationData.CallbackHttpMethod">
            <summary>
              Determine if the callback event should be sent via HTTP GET or HTTP POST
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateApplicationData.AutoAnswer">
            <summary>
              Determines whether or not an incoming call should be automatically answered.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateApplicationData.MessageApiVersion">
            <summary>
              Message API version to use. Set "V2" to use abilities of Messages API v2
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.UpdateApplicationData">
            <summary>
              Parameters of an application to change
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.CallbackHttpMethod">
            <summary>
              Available HTTP methods for callbacks
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.CallbackHttpMethod.Post">
            <summary>
              HTTP POST
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.CallbackHttpMethod.Get">
            <summary>
              HTTP GET
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.IAvailableNumber">
            <summary>
              Access to AvailableNumber Api
            </summary>
        </member>
        <member name="M:Bandwidth.Net.Api.IAvailableNumber.SearchLocalAsync(Bandwidth.Net.Api.LocalNumberQuery,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Search for available local numbers
            </summary>
            <param name="query">Search criterias</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Array with <see cref="T:Bandwidth.Net.Api.AvailableNumber" /> instances</returns>
            <example>
              <code>
            var numbers = await client.AvailableNumber.SearchLocalAsync(new LocalNumberQuery {AreaCode = 910}); 
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.IAvailableNumber.SearchTollFreeAsync(Bandwidth.Net.Api.TollFreeNumberQuery,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Search for available toll free numbers
            </summary>
            <param name="query">Search criterias</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Array with <see cref="T:Bandwidth.Net.Api.AvailableNumber" /> instances</returns>
            <example>
              <code>
            var numbers = await client.AvailableNumber.SearchTollFreeAsync(new TollFreeNumberQuery {Quantity = 5}); 
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.IAvailableNumber.SearchAndOrderLocalAsync(Bandwidth.Net.Api.LocalNumberQueryForOrder,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Search and order available local numbers
            </summary>
            <param name="query">Search criterias</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Array with <see cref="T:Bandwidth.Net.Api.OrderedNumber" /> instances</returns>
            <example>
              <code>
            var orderedNumbers = await client.AvailableNumber.SearchAndOrderLocalAsync(new LocalNumberQueryForOrder {AreaCode = 910, Quantity = 1}); 
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.IAvailableNumber.SearchAndOrderTollFreeAsync(Bandwidth.Net.Api.TollFreeNumberQueryForOrder,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Searches and order available toll free numbers.
            </summary>
            <param name="query">Search criterias</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Array with <see cref="T:Bandwidth.Net.Api.OrderedNumber" /> instances</returns>
            <example>
              <code>
            var orderedNumbers = await client.AvailableNumber.SearchAndOrderTollFreeAsync(new TollFreeNumberQueryForOrder {Quantity = 1}); 
            </code>
            </example>
        </member>
        <member name="T:Bandwidth.Net.Api.TollFreeNumberQueryForOrder">
            <summary>
              Search criterias for toll free numbers
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.TollFreeNumberQueryForOrder.Quantity">
            <summary>
              The maximum number of numbers to return (default 10, maximum 5000).
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.TollFreeNumberQuery">
            <summary>
              Search criterias for toll free numbers
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.TollFreeNumberQuery.Pattern">
            <summary>
              A number pattern that may include letters, digits, and the following wildcard characters
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.LocalNumberQuery">
            <summary>
              Search criterias for local numbers
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.LocalNumberQuery.City">
            <summary>
              A city name.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.LocalNumberQuery.State">
            <summary>
              A two-letter US state abbreviation ("CA" for California).
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.LocalNumberQuery.Zip">
            <summary>
              A 5-digit US ZIP code.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.LocalNumberQuery.AreaCode">
            <summary>
              A 3-digit telephone area code.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.LocalNumberQuery.LocalNumber">
            <summary>
              It is defined as the first digits of a telephone number inside an area code for filtering the results. It must have
              at least 3 digits and the areaCode field must be filled.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.LocalNumberQuery.InLocalCallingArea">
            <summary>
              Boolean value to indicate that the search for available numbers must consider overlayed areas. Only applied for
              localNumber searching.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.LocalNumberQuery.Quantity">
            <summary>
              The maximum number of numbers to return (default 10, maximum 5000).
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.LocalNumberQueryForOrder">
            <summary>
              Search criterias for local numbers
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.LocalNumberQueryForOrder.Pattern">
            <summary>
              A number pattern that may include letters, digits, and the following wildcard characters
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.AvailableNumber">
            <summary>
              Available number result
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.AvailableNumber.Number">
            <summary>
              The telephone number in E.164 format.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.AvailableNumber.NationalNumber">
            <summary>
              The telephone number in a friendly national format.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.AvailableNumber.PatternMatch">
            <summary>
              The telephone number in a friendly national format with some numbers replaced by letters if a pattern was used to
              search the number.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.AvailableNumber.City">
            <summary>
              The city of the phone number.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.AvailableNumber.Lata">
            <summary>
              Local access and transport area (LATA), represents an area within which a regional operating company is permitted to
              offer exchange telecommunications and exchange access services.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.AvailableNumber.RateCenter">
            <summary>
              The rate center is a term used to identify a telephone local exchange service area.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.AvailableNumber.State">
            <summary>
              The state of the phone number.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.AvailableNumber.Price">
            <summary>
              The monthly price for the phone number.
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.OrderedNumber">
            <summary>
              Ordered number result
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.OrderedNumber.Id">
            <summary>
              Id of ordered number
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.OrderedNumber.Number">
            <summary>
              The telephone number in E.164 format.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.OrderedNumber.NationalNumber">
            <summary>
              The telephone number in a friendly national format.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.OrderedNumber.Price">
            <summary>
              The monthly price for the phone number.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.OrderedNumber.Location">
            <summary>
              Url of number
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.IBridge">
            <summary>
              Access to Bridge Api
            </summary>
        </member>
        <member name="M:Bandwidth.Net.Api.IBridge.List(Bandwidth.Net.Api.BridgeQuery,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Get a list of bridges
            </summary>
            <param name="query">Optional query parameters</param>
            <param name="cancellationToken">>Optional token to cancel async operation</param>
            <returns>Collection with <see cref="T:Bandwidth.Net.Api.Bridge" /> instances</returns>
            <example>
              <code>
            var bridges = client.Bridge.List(); 
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.IBridge.CreateAsync(Bandwidth.Net.Api.CreateBridgeData,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Create a bridge.
            </summary>
            <param name="data">Parameters of new bridge</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Created bridge Id</returns>
            <example>
              <code>
            var bridgeId = await client.Bridge.CreateAsync(new CreateBridgeData{ CallIds = new[]{"callId"}});
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.IBridge.GetAsync(System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Get information about a bridge
            </summary>
            <param name="bridgeId">Id of bridge to get</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Task with <see cref="T:Bandwidth.Net.Api.Bridge" />Bridge instance</returns>
            <example>
              <code>
            var bridge = await client.Bridge.GetAsync("bridgeId");
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.IBridge.UpdateAsync(System.String,Bandwidth.Net.Api.UpdateBridgeData,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Update a bridge
            </summary>
            <param name="bridgeId">Id of bridge to change</param>
            <param name="data">Changed data</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Task instance for async operation</returns>
            <example>
              <code>
            await client.Bridge.UpdateAsync("bridgeId", new UpdateBridgeData {BridgeAudio = true});
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.IBridge.GetCalls(System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Get a list of calls of bridge
            </summary>
            <param name="bridgeId">Id of bridge to get calls</param>
            <param name="cancellationToken">>Optional token to cancel async operation</param>
            <returns>Collection with <see cref="T:Bandwidth.Net.Api.Call" /> instances</returns>
            <example>
              <code>
            var calls = client.Bridge.GetCalls(); 
            </code>
            </example>
        </member>
        <member name="T:Bandwidth.Net.Api.Bridge">
            <summary>
              Bridge information
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Bridge.Id">
            <summary>
              The unique identifier for the bridge.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Bridge.State">
            <summary>
            Bridge state
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Bridge.CallIds">
            <summary>
            List of call Ids that will be in the bridge.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Bridge.BridgeAudio">
            <summary>
            Enable/Disable two way audio path.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Bridge.CompletedTime">
            <summary>
            The time when the bridge was completed.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Bridge.CreatedTime">
            <summary>
            The time that bridge was created.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Bridge.ActivatedTime">
            <summary>
            The time that the bridge got into active state.
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.BridgeState">
            <summary>
            Possible bridge state
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.BridgeState.Created">
            <summary>
            The bridge was created but the audio was never bridged.
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.BridgeState.Active">
            <summary>
            The bridge has two active calls and the audio was already bridged before.
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.BridgeState.Hold">
            <summary>
            The bridge calls are on hold (bridgeAudio was set to false).
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.BridgeState.Completed">
            <summary>
            The bridge was completed. The bridge is completed when all calls hangup or when all calls are removed from bridge.
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.BridgeState.Error">
            <summary>
            Some error was detected in bridge.
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.BridgeQuery">
            <summary>
              Query to get bridges
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.BridgeQuery.Size">
            <summary>
              Used for pagination to indicate the size of each page requested for querying a list of bridges. If no value is
              specified the default value is 25 (maximum value 1000).
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.CreateBridgeData">
            <summary>
              Parameters to create an bridge
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateBridgeData.CallIds">
            <summary>
            List of call Ids that will be in the bridge.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateBridgeData.BridgeAudio">
            <summary>
            Enable/Disable two way audio path.
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.UpdateBridgeData">
            <summary>
              Parameters of a bridge to change
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.ICall">
            <summary>
              Access to Call Api
            </summary>
        </member>
        <member name="M:Bandwidth.Net.Api.ICall.List(Bandwidth.Net.Api.CallQuery,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Get a list of previous calls that were made or received
            </summary>
            <param name="query">Optional query parameters</param>
            <param name="cancellationToken">>Optional token to cancel async operation</param>
            <returns>Collection with <see cref="T:Bandwidth.Net.Api.Call" /> instances</returns>
            <example>
              <code>
            var calls = client.Call.List(); 
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.ICall.CreateAsync(Bandwidth.Net.Api.CreateCallData,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Create an outbound phone call
            </summary>
            <param name="data">Parameters of new call</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Created call id</returns>
            <example>
              <code>
            var callId = await client.Call.CreateAsync(new CreateCallData{ From = "+1234567890", To = "+1234567891"});
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.ICall.GetAsync(System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Get information about a call that was made or received
            </summary>
            <param name="callId">Id of call to get</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Task with <see cref="T:Bandwidth.Net.Api.Call" />Call instance</returns>
            <example>
              <code>
            var call = await client.Call.GetAsync("callId");
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.ICall.UpdateAsync(System.String,Bandwidth.Net.Api.UpdateCallData,System.Nullable{System.Threading.CancellationToken},System.Boolean)">
            <summary>
              Manage an active phone call. E.g. Answer an incoming call, reject an incoming call, turn on / off recording, transfer, hang up.
            </summary>
            <param name="callId">Id of call to change</param>
            <param name="data">Changed data</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <param name="disposeResponse">Set false if you are going to free response resources yourselves</param>
            <returns>Http response message</returns>
            <example>
              <code>
            await client.Call.UpdateAsync("callId", new UpdateCallData {CallAudio = true});
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.ICall.SendDtmfAsync(System.String,Bandwidth.Net.Api.SendDtmfData,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Send DTMF (phone keypad digit presses)
            </summary>
            <param name="callId">Id of call to change</param>
            <param name="data">DTMF data</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Task instance for async operation</returns>
            <example>
              <code>
            await client.Call.SendDtmfAsync("callId", new SendDtmfData {DtmfOut = "1234"});
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.ICall.GetEvents(System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Get a list of events of call
            </summary>
            <param name="callId">Id of call to get events</param>
            <param name="cancellationToken">>Optional token to cancel async operation</param>
            <returns>Collection with <see cref="T:Bandwidth.Net.Api.CallEvent" /> instances</returns>
            <example>
              <code>
            var events = client.Call.GetEvents("callId"); 
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.ICall.GetEventAsync(System.String,System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Get an event of the call
            </summary>
            <param name="callId">Id of call to get event</param>
            <param name="eventId">Id of event</param>
            <param name="cancellationToken">>Optional token to cancel async operation</param>
            <returns>Collection with <see cref="T:Bandwidth.Net.Api.CallEvent" /> instances</returns>
            <example>
              <code>
            var ev = client.Call.GetEventAsync("callId", "eventId"); 
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.ICall.GetRecordings(System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Get a list of recordings of call
            </summary>
            <param name="callId">Id of call to get recordings</param>
            <param name="cancellationToken">>Optional token to cancel async operation</param>
            <returns>Collection with <see cref="T:Bandwidth.Net.Api.Recording" /> instances</returns>
            <example>
              <code>
            var recordings = client.Call.GetRecordings("callId"); 
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.ICall.GetTranscriptions(System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Get a list of transcriptions of call
            </summary>
            <param name="callId">Id of call to get transcriptions</param>
            <param name="cancellationToken">>Optional token to cancel async operation</param>
            <returns>Collection with <see cref="T:Bandwidth.Net.Api.Transcription" /> instances</returns>
            <example>
              <code>
            var transcriptions = client.Call.GetTranscriptions("callId"); 
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.ICall.CreateGatherAsync(System.String,Bandwidth.Net.Api.CreateGatherData,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Gather the DTMF digits pressed
            </summary>
            <param name="callId">Id of the calls</param>
            <param name="data">Parameters of new call</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Created gather id</returns>
            <example>
              <code>
            var gatherId = await client.Call.CreateGatherAsync("callId", new CreateGatherData{ MaxDigits = 1});
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.ICall.GetGatherAsync(System.String,System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
             Get the gather DTMF parameters and results
            </summary>
            <param name="callId">Id of the call</param>
            <param name="gatherId">Id of the gather</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Instance of found gather</returns>
            <example>
              <code>
            var gather = await client.Call.GetGatherAsync("callId", "gatherId");
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.ICall.UpdateGatherAsync(System.String,System.String,Bandwidth.Net.Api.UpdateGatherData,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Update the gather 
            </summary>
            <param name="callId">Id of the call</param>
            <param name="gatherId">Id of the gather</param>
            <param name="data">Changed data</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Task instance for async operation</returns>
            <example>
              <code>
            await client.Call.UpdateGatherAsync("callId", "gatherId", new UpdateGatherData {State = CallGatherState.Completed});
            </code>
            </example>
        </member>
        <member name="T:Bandwidth.Net.Api.CallExtensions">
            <summary>
            Additional methods for ICall
            </summary>
        </member>
        <member name="M:Bandwidth.Net.Api.CallExtensions.AnswerAsync(Bandwidth.Net.Api.ICall,System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Answer incoming call
            </summary>
            <param name="call">Instance of <see cref="T:Bandwidth.Net.Api.ICall"/></param>
            <param name="callId">Id of call</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Task instance for async operation</returns>
            <example>
            <code>
            await call.AnswerAsync("callId");
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.CallExtensions.RejectAsync(Bandwidth.Net.Api.ICall,System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Reject incoming call
            </summary>
            <param name="call">Instance of <see cref="T:Bandwidth.Net.Api.ICall"/></param>
            <param name="callId">Id of call</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Task instance for async operation</returns>
            <example>
            <code>
            await call.RejectAsync("callId");
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.CallExtensions.HangupAsync(Bandwidth.Net.Api.ICall,System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Complete active call
            </summary>
            <param name="call">Instance of <see cref="T:Bandwidth.Net.Api.ICall"/></param>
            <param name="callId">Id of call</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Task instance for async operation</returns>
            <example>
            <code>
            await call.HangupAsync("callId");
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.CallExtensions.TurnCallRecordingAsync(Bandwidth.Net.Api.ICall,System.String,System.Boolean,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Tune on (or tune off) call recording
            </summary>
            <param name="call">Instance of <see cref="T:Bandwidth.Net.Api.ICall"/></param>
            <param name="callId">Id of call</param>
            <param name="enabled">Enable or disable call recording</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Task instance for async operation</returns>
            <example>
            <code>
            await call.TurnCallRecordingAsync("callId", true); // tune on call recording
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.CallExtensions.TransferAsync(Bandwidth.Net.Api.ICall,System.String,System.String,System.String,Bandwidth.Net.Api.WhisperAudio,System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Transfer current call
            </summary>
            <param name="call">Instance of <see cref="T:Bandwidth.Net.Api.ICall"/></param>
            <param name="callId">Id of call</param>
            <param name="to">Phone number or SIP address that the call is going to be transferred to.</param>
            <param name="callerId">This is the caller id that will be used when the call is transferred.</param>
            <param name="whisperAudio">Audio to be played to the caller that the call will be transferred to.</param>
            <param name="callbackUrl">The full server URL where the call events related to the Call will be sent to.</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Id of transfered call</returns>
            <example>
            <code>
            var transferedCallId = await call.TransferAsync("callId", "number"); 
            </code>
            </example>
        </member>
        <member name="T:Bandwidth.Net.Api.Call">
            <summary>
              Call information
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Call.Id">
            <summary>
              The unique identifier for the call.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Call.Direction">
            <summary>
            Call direction
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Call.From">
            <summary>
            The phone number or SIP address that made the call. Phone numbers are in E.164 format (e.g. +15555555555) -or- SIP addresses (e.g. identify@domain.com).
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Call.To">
            <summary>
            The phone number or SIP address that received the call. Phone numbers are in E.164 format (e.g. +15555555555) -or- SIP addresses (e.g. identify@domain.com).
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Call.State">
            <summary>
            Call state
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Call.StartTime">
            <summary>
            Date when the call was created. 
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Call.ActiveTime">
            <summary>
            Date when the call was answered.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Call.EndTime">
            <summary>
            Date when the call ended.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Call.CallTimeout">
            <summary>
            Determine how long should the platform wait for call answer before timing out in seconds (milliseconds).
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Call.CallbackUrl">
            <summary>
            The server URL where the call events related to the call will be sent.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Call.CallbackHttpMethod">
            <summary>
            Determine if the callback event should be sent via HTTP GET or HTTP POST.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Call.CallbackTimeout">
            <summary>
            Determine how long should the platform wait for callbackUrl's response before timing out (milliseconds).
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Call.FallbackUrl">
            <summary>
            The server URL used to send the call events if the request to callbackUrl fails.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Call.ChargeableDuration">
            <summary>
            The seconds between ActiveTime and EndTime
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Call.BridgeId">
            <summary>
            Id of the bridge where the call will be added
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Call.ConferenceId">
            <summary>
            Id of the conference where the call will be added
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Call.WhisperAudio">
            <summary>
            Audio to be played to the number that the call will be transfered to
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Call.TransferCallerId">
            <summary>
            This is the caller id that will be used when the call is transferred
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Call.TransferTo">
            <summary>
            Number that the call is going to be transferred to
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Call.RecordingEnabled">
            <summary>
            Indicates if the call should be recorded after being created
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Call.RecordingFileFormat">
            <summary>
            The file format of the recorded call
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Call.RecordingMaxDuration">
            <summary>
            Indicates the maximum duration of call recording in seconds
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Call.TranscriptionEnabled">
            <summary>
            Whether all the recordings for this call should be be automatically transcribed.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Call.Tag">
            <summary>
            A string that will be included in the callback events of the call
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Call.SipHeaders">
            <summary>
            Map of Sip headers prefixed by "X-". Up to 5 headers can be sent per call.
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.WhisperAudio">
            <summary>
            Audio to be played to the number that the call will be transfered to
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.WhisperAudio.Gender">
            <summary>
            The gender of the voice
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.WhisperAudio.Voice">
            <summary>
            The voice to speak the sentence
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.WhisperAudio.Sentence">
            <summary>
            The sentence
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.WhisperAudio.Locale">
            <summary>
            The locale used to get the accent of the voice used to synthesize the sentence
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.CallDirection">
            <summary>
            Possible call directions
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.CallDirection.In">
            <summary>
            Incoming call
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.CallDirection.Out">
            <summary>
            Outgoing call
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.CallState">
            <summary>
            Possible call state
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.CallState.Started">
            <summary>
            Call is created but not answered.
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.CallState.Rejected">
            <summary>
            Incoming call was rejected.
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.CallState.Active">
            <summary>
            Call is answered and isn't completed.
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.CallState.Completed">
            <summary>
            Call is finished.
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.CallState.Transferring">
            <summary>
            Transferring connects audio to a new outbound call.
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.CallQuery">
            <summary>
              Query to get calls
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CallQuery.BridgeId">
            <summary>
            The id of the bridge for querying a list of calls history
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CallQuery.ConferenceId">
            <summary>
            The id of the conference for querying a list of calls history 
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CallQuery.From">
            <summary>
            The number to filter calls that came from (must be either an E.164 formated number, like +19195551212, or a valid SIP URI, like sip:someone@somewhere.com).
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CallQuery.To">
            <summary>
            The number to filter calls that was called to (must be either an E.164 formated number, like +19195551212, or a valid SIP URI, like sip:someone@somewhere.com).
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CallQuery.Size">
            <summary>
              Used for pagination to indicate the size of each page requested for querying a list of calls. If no value is
              specified the default value is 25 (maximum value 1000).
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CallQuery.SortOrder">
            <summary>
            How to sort the calls. If no value is specified the default value is Desc
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.SortOrder">
            <summary>
            Sort order types
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.SortOrder.Desc">
            <summary>
            Descending
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.SortOrder.Asc">
            <summary>
            Ascending 
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.CreateCallData">
            <summary>
              Parameters to create an call
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateCallData.From">
            <summary>
            The phone number or SIP address that made the call. Phone numbers are in E.164 format (e.g. +15555555555) -or- SIP addresses (e.g. identify@domain.com).
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateCallData.To">
            <summary>
            The phone number or SIP address that received the call. Phone numbers are in E.164 format (e.g. +15555555555) -or- SIP addresses (e.g. identify@domain.com).
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateCallData.CallTimeout">
            <summary>
            Determine how long should the platform wait for call answer before timing out in seconds (milliseconds).
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateCallData.CallbackUrl">
            <summary>
            The server URL where the call events related to the call will be sent.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateCallData.CallbackHttpMethod">
            <summary>
            Determine if the callback event should be sent via HTTP GET or HTTP POST.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateCallData.CallbackTimeout">
            <summary>
            Determine how long should the platform wait for callbackUrl's response before timing out (milliseconds).
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateCallData.FallbackUrl">
            <summary>
            The server URL used to send the call events if the request to callbackUrl fails.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateCallData.BridgeId">
            <summary>
            Id of the bridge where the call will be added
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateCallData.ConferenceId">
            <summary>
            Id of the conference where the call will be added
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateCallData.RecordingEnabled">
            <summary>
            Indicates if the call should be recorded after being created
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateCallData.RecordingFileFormat">
            <summary>
            The file format of the recorded call.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateCallData.RecordingMaxDuration">
            <summary>
            Indicates the maximum duration of call recording in seconds
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateCallData.TranscriptionEnabled">
            <summary>
            Whether all the recordings for this call should be be automatically transcribed.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateCallData.Tag">
            <summary>
            A string that will be included in the callback events of the call
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateCallData.SipHeaders">
            <summary>
            Map of Sip headers prefixed by "X-". Up to 5 headers can be sent per call.
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.UpdateCallData">
            <summary>
              Parameters of a call to change
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.UpdateCallData.State">
            <summary>
            Call state
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.UpdateCallData.TransferCallerId">
            <summary>
            This is the caller id that will be used when the call is transferred
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.UpdateCallData.TransferTo">
            <summary>
            Number that the call is going to be transferred to
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.UpdateCallData.RecordingEnabled">
            <summary>
            Indicates if the call should be recorded after being created
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.UpdateCallData.RecordingFileFormat">
            <summary>
            The file format of the recorded call.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.UpdateCallData.WhisperAudio">
            <summary>
            Audio to be played to the number that the call will be transfered to
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.UpdateCallData.CallbackUrl">
            <summary>
            The server URL where the call events related to the call will be sent.
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.CreateGatherData">
            <summary>
            Parameters to create a gather
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateGatherData.MaxDigits">
            <summary>
            The maximum number of digits to collect, not including terminating digits (maximum 30).
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateGatherData.InterDigitTimeout">
            <summary>
            Stop gathering if a DTMF digit is not detected in this many seconds (default 5.0; maximum 30.0).
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateGatherData.TerminatingDigits">
            <summary>
            Terminating digits
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateGatherData.Tag">
            <summary>
             String that will be included with the response and events for this gather operation.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateGatherData.Prompt">
            <summary>
            Gather prompt
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.GatherPrompt">
            <summary>
            Gather prompt
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.GatherPrompt.Bargeable">
            <summary>
            Make the prompt (audio or sentence) bargeable (will be interrupted at first digit gathered). Default: true
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.CallGatherState">
            <summary>
            Possible gather states
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.CallGatherState.Created">
            <summary>
            Created
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.CallGatherState.Completed">
            <summary>
            Completed
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.UpdateGatherData">
            <summary>
            Parameters to change gather
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.UpdateGatherData.State">
            <summary>
            Gather state
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.CallGather">
            <summary>
            Gather of a call
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CallGather.Id">
            <summary>
            The gather event unique id.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CallGather.State">
            <summary>
            Gather state
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CallGather.Reason">
            <summary>
            Gather state
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CallGather.CreatedTime">
            <summary>
            Time of creation
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CallGather.CompletedTime">
            <summary>
            Completed time
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CallGather.Call">
            <summary>
            Url to linked call
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CallGather.CallId">
            <summary>
            Id of linked call
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CallGather.Digits">
            <summary>
            Digits
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.CallGatherReason">
            <summary>
            Possible gather reasons
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.CallGatherReason.MaxDigits">
            <summary>
            The maximum number of digits specified for the gather command.
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.CallGatherReason.TerminatingDigit">
            <summary>
            The digit specified in the gather command was entered.
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.CallGatherReason.InterDigitTimeout">
            <summary>
            A timeout occurred indicating the maximum amount of time to wait between digits, or before the first digit was pressed.
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.CallGatherReason.HungUp">
            <summary>
            Call was hung up thus terminating the gather
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.CallEvent">
            <summary>
            The event that occurred during the call
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CallEvent.Id">
            <summary>
            The call event id
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CallEvent.Name">
            <summary>
            The name of the event.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CallEvent.Time">
            <summary>
            The time the event occurred.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CallEvent.Data">
            <summary>
            Optional event data
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.SendDtmfData">
            <summary>
            Send DTMF data
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.SendDtmfData.DtmfOut">
            <summary>
            String containing the DTMF characters to be sent in a call.
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.IConference">
            <summary>
              Access to Conference Api
            </summary>
        </member>
        <member name="M:Bandwidth.Net.Api.IConference.CreateAsync(Bandwidth.Net.Api.CreateConferenceData,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Create a conference
            </summary>
            <param name="data">Parameters of new conference</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Created conference Id</returns>
            <example>
              <code>
            var conferenceId = await client.Conference.CreateAsync(new CreateConferenceData{ From = "+1234567890"});
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.IConference.GetAsync(System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Get information about a conference
            </summary>
            <param name="conferenceId">Id of conference to get</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Task with <see cref="T:Bandwidth.Net.Api.Conference" />Conference instance</returns>
            <example>
              <code>
            var conference = await client.Conference.GetAsync("conferenceId");
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.IConference.UpdateAsync(System.String,Bandwidth.Net.Api.UpdateConferenceData,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Change the conference properties and/or status
            </summary>
            <param name="conferenceId">Id of conference to change</param>
            <param name="data">Changed data</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Task instance for async operation</returns>
            <example>
              <code>
            await client.Conference.UpdateAsync("conferenceId", new UpdateConferenceData {Mute = true});
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.IConference.GetMembers(System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              List all members from a conference
            </summary>
            <param name="conferenceId">Id of conference to get members</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Collection with <see cref="T:Bandwidth.Net.Api.ConferenceMember" /> instances</returns>
            <example>
              <code>
            var members = client.Conference.GetMembers("conferenceId");
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.IConference.CreateMemberAsync(System.String,Bandwidth.Net.Api.CreateConferenceMemberData,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Add a member to a conference.
            </summary>
            <param name="conferenceId">Id of conference to add member</param>
            <param name="data">Data for creation of new member</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Created member Id</returns>
            <example>
              <code>
            var memberId = await client.Conference.CreateMemberAsync("conferenceId", new CreateConferenceMemberData{From = "+1234567980"});
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.IConference.GetMemberAsync(System.String,System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Retrieve properties for a single conference member
            </summary>
            <param name="conferenceId">Id of the conference</param>
            <param name="memberId">Id of the member to get data</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Conference member data</returns>
            <example>
              <code>
            var member = await client.Conference.GetMemberAsync("conferenceId", "memberId");
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.IConference.UpdateMemberAsync(System.String,System.String,Bandwidth.Net.Api.UpdateConferenceMemberData,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Update a conference member (remove, mute, hold)
            </summary>
            <param name="conferenceId">Id of the conference</param>
            <param name="memberId">Id of the member to update</param>
            <param name="data">Changed data</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Task instance for async operation</returns>
            <example>
              <code>
            await client.Conference.UpdateMemberAsync("conferenceId", "memberId", UpdateConferenceMemberData{Mute = true});
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.IConference.PlayAudioToMemberAsync(System.String,System.String,Bandwidth.Net.PlayAudioData,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Play audio to conference member
            </summary>
            <param name="conferenceId">Id of the conference</param>
            <param name="memberId">Id of the member to play audio</param>
            <param name="data">Audio data to play</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Task instance for async operation</returns>
        </member>
        <member name="T:Bandwidth.Net.Api.ConferenceExtensions">
            <summary>
              Conference extension methods
            </summary>
        </member>
        <member name="M:Bandwidth.Net.Api.ConferenceExtensions.SpeakSentenceToMemberAsync(Bandwidth.Net.Api.IConference,System.String,System.String,System.String,Bandwidth.Net.Gender,System.String,System.String,System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Speak a sentence
            </summary>
            <param name="instance">Instance of <see cref="T:Bandwidth.Net.IPlayAudio" /></param>
            <param name="conferenceId">Id of the conference</param>
            <param name="memberId">Id of the member to play audio</param>
            <param name="sentence">The sentence to speak</param>
            <param name="gender">The gender of the voice used to synthesize the sentence.</param>
            <param name="voice">The voice to speak the sentence.</param>
            <param name="locale">The locale used to get the accent of the voice used to synthesize the sentence.</param>
            <param name="tag">A string that will be included in the events delivered when the audio playback starts or finishes</param>
            <param name="cancellationToken">
              Optional token to cancel async operation
            </param>
            <returns>Task instance for async operation</returns>
            <example>
              <code>
            await client.Conference.SpeakSentenceToMemberAsync("conferenceId", "memberId, "Hello");
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.ConferenceExtensions.PlayAudioFileToMemberAsync(Bandwidth.Net.Api.IConference,System.String,System.String,System.String,System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Play audio file by url
            </summary>
            <param name="instance">>Instance of <see cref="T:Bandwidth.Net.IPlayAudio" /></param>
            <param name="conferenceId">Id of the conference</param>
            <param name="memberId">Id of the member to play audio</param>
            <param name="fileUrl">Url to file to play</param>
            <param name="tag">A string that will be included in the events delivered when the audio playback starts or finishes</param>
            <param name="cancellationToken">
              Optional token to cancel async operation
            </param>
            <returns>Task instance for async operation</returns>
            <example>
              <code>
            await client.Conference.PlayAudioFileToMemberAsync("conferenceId", "memberId, "http://host/path/to/file.mp3");
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.ConferenceExtensions.DeleteMemberAsync(Bandwidth.Net.Api.IConference,System.String,System.String)">
            <summary>
              Remove member from the conference
            </summary>
            <param name="instance">>Instance of <see cref="T:Bandwidth.Net.IPlayAudio" /></param>
            <param name="conferenceId">Id of the conference</param>
            <param name="memberId">Id of the member to remove</param>
            <returns>Task instance for async operation</returns>
        </member>
        <member name="M:Bandwidth.Net.Api.ConferenceExtensions.HoldMemberAsync(Bandwidth.Net.Api.IConference,System.String,System.String,System.Boolean)">
            <summary>
              Hold/Unhold the conference member
            </summary>
            <param name="instance">>Instance of <see cref="T:Bandwidth.Net.IPlayAudio" /></param>
            <param name="conferenceId">Id of the conference</param>
            <param name="memberId">Id of the member</param>
            <param name="hold">'true' to hold member or 'false'</param>
            <returns>Task instance for async operation</returns>
        </member>
        <member name="M:Bandwidth.Net.Api.ConferenceExtensions.MuteMemberAsync(Bandwidth.Net.Api.IConference,System.String,System.String,System.Boolean)">
            <summary>
              Mute/Unmute the conference member
            </summary>
            <param name="instance">>Instance of <see cref="T:Bandwidth.Net.IPlayAudio" /></param>
            <param name="conferenceId">Id of the conference</param>
            <param name="memberId">Id of the member</param>
            <param name="mute">'true' to mute member or 'false'</param>
            <returns>Task instance for async operation</returns>
        </member>
        <member name="M:Bandwidth.Net.Api.ConferenceExtensions.TerminateAsync(Bandwidth.Net.Api.IConference,System.String)">
            <summary>
              Terminate the conference
            </summary>
            <param name="instance">>Instance of <see cref="T:Bandwidth.Net.IPlayAudio" /></param>
            <param name="conferenceId">Id of the conference to terminate</param>
            <returns>Task instance for async operation</returns>
            ///
            <returns></returns>
        </member>
        <member name="M:Bandwidth.Net.Api.ConferenceExtensions.HoldAsync(Bandwidth.Net.Api.IConference,System.String,System.Boolean)">
            <summary>
              Hold/Unhold the conference
            </summary>
            <param name="instance">>Instance of <see cref="T:Bandwidth.Net.IPlayAudio" /></param>
            <param name="conferenceId">Id of the conference</param>
            <param name="hold">'true' to hold the conference or 'false'</param>
            <returns>Task instance for async operation</returns>
        </member>
        <member name="M:Bandwidth.Net.Api.ConferenceExtensions.MuteAsync(Bandwidth.Net.Api.IConference,System.String,System.Boolean)">
            <summary>
              Mute/Unmute the conference
            </summary>
            <param name="instance">>Instance of <see cref="T:Bandwidth.Net.IPlayAudio" /></param>
            <param name="conferenceId">Id of the conference</param>
            <param name="mute">'true' to the conference or 'false'</param>
            <returns>Task instance for async operation</returns>
        </member>
        <member name="T:Bandwidth.Net.Api.Conference">
            <summary>
              Conference information
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Conference.Id">
            <summary>
              The unique identifier for the conference.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Conference.From">
            <summary>
              The phone number that will host the conference.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Conference.State">
            <summary>
              Conference state
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Conference.CreatedTime">
            <summary>
              The time that the Conference was created
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Conference.CompletedTime">
            <summary>
              The time that the Conference was completed
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Conference.ActiveMembers">
            <summary>
              The number of active conference members.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Conference.Hold">
            <summary>
              If "true", all member can't hear or speak in the conference. If "false", all members can hear and speak in the
              conference (unless set at the member level).
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Conference.Mute">
            <summary>
              If "true", all member can't speak in the conference. If "false", all members can speak in the conference (unless set
              at the member level).
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Conference.CallbackUrl">
            <summary>
              The complete URL where the events related to the Conference will be sent to.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Conference.CallbackHttpMethod">
            <summary>
              Determine if the callback event should be sent via HTTP GET or HTTP POST.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Conference.CallbackTimeout">
            <summary>
              Determine how long should the platform wait for callbackUrl's response before timing out in milliseconds.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Conference.FallbackUrl">
            <summary>
              The URL used to send the callback event if the request to callbackUrl fails.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Conference.Profile">
            <summary>
              The conference profile that determines how DTMF is used.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Conference.Tag">
            <summary>
              A string that will be included in the callback events of the conference.
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.ConferenceState">
            <summary>
              Possible conference states
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.ConferenceState.Created">
            <summary>
              Conference was created and has no members.
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.ConferenceState.Active">
            <summary>
              Conference was created and has one or more ACTIVE members. As soon as the first member is added to a conference, the
              state is changed to active.
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.ConferenceState.Completed">
            <summary>
              The conference was completed. Once the conference is completed, It can not be used anymore.
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.CreateConferenceData">
            <summary>
              Data to create a conference
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateConferenceData.From">
            <summary>
              The phone number that will host the conference.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateConferenceData.CallbackUrl">
            <summary>
              The complete URL where the events related to the Conference will be sent to.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateConferenceData.CallbackHttpMethod">
            <summary>
              Determine if the callback event should be sent via HTTP GET or HTTP POST.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateConferenceData.CallbackTimeout">
            <summary>
              Determine how long should the platform wait for callbackUrl's response before timing out in milliseconds.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateConferenceData.FallbackUrl">
            <summary>
              The URL used to send the callback event if the request to callbackUrl fails.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateConferenceData.Profile">
            <summary>
              The conference profile that determines how DTMF is used.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateConferenceData.Tag">
            <summary>
              A string that will be included in the callback events of the conference.
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.ConferenceMember">
            <summary>
              Conference member
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.ConferenceMember.Id">
            <summary>
              The unique identifier for the member.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.ConferenceMember.State">
            <summary>
              Conference state
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.ConferenceMember.Hold">
            <summary>
              If "true", member can't hear the conference. If "false", the member can hear the conference.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.ConferenceMember.Mute">
            <summary>
              If "true", the member can't speak in the conference, but can hear audio. If "false", the member can speak in the
              conference.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.ConferenceMember.JoinTone">
            <summary>
              If "true", will play a tone when the member joins the conference. If "false", no tone is played when the member joins
              the conference.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.ConferenceMember.LeavingTone">
            <summary>
              If "true", will play a tone when the member leaves the conference. If "false", no tone is played when the member
              leaves the conference.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.ConferenceMember.AddedTime">
            <summary>
              Date and time when the member was added to the conference
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.ConferenceMember.RemovedTime">
            <summary>
              Date and time when the member was removed to the conference
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.ConferenceMember.Call">
            <summary>
              The URL of the call resource for this member.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.ConferenceMember.CallId">
            <summary>
              The id of the call for this member.
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.ConferenceMemberState">
            <summary>
              Possible conference member states
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.ConferenceMemberState.Active">
            <summary>
              Active
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.ConferenceMemberState.Completed">
            <summary>
              Completed
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.CreateConferenceMemberData">
            <summary>
              Data to add member to the conference
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateConferenceMemberData.Hold">
            <summary>
              If "true", member can't hear the conference. If "false", the member can hear the conference.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateConferenceMemberData.Mute">
            <summary>
              If "true", the member can't speak in the conference, but can hear audio. If "false", the member can speak in the
              conference.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateConferenceMemberData.JoinTone">
            <summary>
              If "true", will play a tone when the member joins the conference. If "false", no tone is played when the member joins
              the conference.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateConferenceMemberData.LeavingTone">
            <summary>
              If "true", will play a tone when the member leaves the conference. If "false", no tone is played when the member
              leaves the conference.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateConferenceMemberData.CallId">
            <summary>
              The callId must refer to an active call that was created using this conferenceId.
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.UpdateConferenceData">
            <summary>
              Changable conference data
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.UpdateConferenceData.State">
            <summary>
              Conference state
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.UpdateConferenceData.Hold">
            <summary>
              If "true", all member can't hear or speak in the conference. If "false", all members can hear and speak in the
              conference (unless set at the member level).
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.UpdateConferenceData.Mute">
            <summary>
              If "true", all member can't speak in the conference. If "false", all members can speak in the conference (unless set
              at the member level).
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.UpdateConferenceData.CallbackUrl">
            <summary>
              The complete URL where the events related to the Conference will be sent to.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.UpdateConferenceData.CallbackHttpMethod">
            <summary>
              Determine if the callback event should be sent via HTTP GET or HTTP POST.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.UpdateConferenceData.CallbackTimeout">
            <summary>
              Determine how long should the platform wait for callbackUrl's response before timing out in milliseconds.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.UpdateConferenceData.FallbackUrl">
            <summary>
              The URL used to send the callback event if the request to callbackUrl fails.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.UpdateConferenceData.Tag">
            <summary>
              A string that will be included in the callback events of the conference.
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.UpdateConferenceMemberData">
            <summary>
              Changable conference member data
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.UpdateConferenceMemberData.State">
            <summary>
              Conference state
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.UpdateConferenceMemberData.Hold">
            <summary>
              If "true", member can't hear the conference. If "false", the member can hear the conference.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.UpdateConferenceMemberData.Mute">
            <summary>
              If "true", the member can't speak in the conference, but can hear audio. If "false", the member can speak in the
              conference.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.UpdateConferenceMemberData.JoinTone">
            <summary>
              If "true", will play a tone when the member joins the conference. If "false", no tone is played when the member joins
              the conference.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.UpdateConferenceMemberData.LeavingTone">
            <summary>
              If "true", will play a tone when the member leaves the conference. If "false", no tone is played when the member
              leaves the conference.
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.ConferenceDtmfProfile">
            <summary>
            The conference profile that determines how DTMF is used
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.ConferenceDtmfProfile.InterpretDigits">
            <summary>
             The conference will handle DTMF with the default behavior
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.ConferenceDtmfProfile.PassthruDigits">
            <summary>
            Allows the application to receive DTMF events and use the gather API.
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.IDomain">
            <summary>
              Access to Domain Api
            </summary>
        </member>
        <member name="M:Bandwidth.Net.Api.IDomain.List(Bandwidth.Net.Api.DomainQuery,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Get a list of domains
            </summary>
            <param name="query">Optional query parameters</param>
            <param name="cancellationToken">>Optional token to cancel async operation</param>
            <returns>Collection with <see cref="T:Bandwidth.Net.Api.Domain" /> instances</returns>
            <example>
              <code>
            var domains = client.Domain.List(); 
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.IDomain.CreateAsync(Bandwidth.Net.Api.CreateDomainData,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Create a domain.
            </summary>
            <param name="data">Parameters of new domain</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Created domain id</returns>
            <example>
              <code>
            var domainId = await client.Domain.CreateAsync(new CreateDomainData{ Name = "new-domain"});
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.IDomain.DeleteAsync(System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Remove the domain
            </summary>
            <param name="domainId">Id of domain to remove</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Task instance for async operation</returns>
            <example>
              <code>
            await client.Domain.DeleteAsync("domainId");
            </code>
            </example>
        </member>
        <member name="T:Bandwidth.Net.Api.Domain">
            <summary>
              Domain information
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Domain.Id">
            <summary>
              The unique identifier for the domain.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Domain.Name">
             <summary>
            The name is a unique URI to be used in DNS lookups
             </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Domain.Description">
            <summary>
            Description of the domain
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.CreateDomainData">
            <summary>
            Data to create domain
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateDomainData.Name">
             <summary>
            The name is a unique URI to be used in DNS lookups
             </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateDomainData.Description">
            <summary>
            Description of the domain
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.DomainQuery">
            <summary>
            Query parameters to domain search
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.DomainQuery.Size">
            <summary>
            Used for pagination to indicate the size of each page requested for querying a list of domain. If no value is specified the default value is 25 (maximum value 100).
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.IEndpoint">
            <summary>
              Access to Endpoint Api
            </summary>
        </member>
        <member name="M:Bandwidth.Net.Api.IEndpoint.List(System.String,Bandwidth.Net.Api.EndpointQuery,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Get a list of endpoints
            </summary>
            <param name="domainId">Id of endpoint's domain</param>
            <param name="query">Optional query parameters</param>
            <param name="cancellationToken">>Optional token to cancel async operation</param>
            <returns>Collection with <see cref="T:Bandwidth.Net.Api.Endpoint" /> instances</returns>
            <example>
              <code>
            var endpoints = client.Endpoint.List("domainId"); 
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.IEndpoint.CreateAsync(Bandwidth.Net.Api.CreateEndpointData,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Create a endpoint.
            </summary>
            <param name="data">Parameters of new endpoint</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Created endpoint Id</returns>
            <example>
              <code>
            var endpointId = await client.Endpoint.CreateAsync(new CreateEndpointData{ Name = "endpoint", DomainId="domainId", ApplicationId="applicationId", Credentials = new CreateEndpointCredentials{Password = "123456"}});
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.IEndpoint.GetAsync(System.String,System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Get information about a endpoint
            </summary>
            <param name="domainId">Id of endpoint's domain</param>
            <param name="endpointId">Id of endpoint to get</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Task with <see cref="T:Bandwidth.Net.Api.Endpoint" />Endpoint instance</returns>
            <example>
              <code>
            var endpoint = await client.Endpoint.GetAsync("domainId", "endpointId");
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.IEndpoint.UpdateAsync(System.String,System.String,Bandwidth.Net.Api.UpdateEndpointData,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Update the endpoint
            </summary>
            <param name="domainId">Id of endpoint's domain</param>
            <param name="endpointId">Id of endpoint to change</param>
            <param name="data">Changed data</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Task instance for async operation</returns>
            <example>
              <code>
            await client.Endpoint.UpdateAsync("domainId", "endpointId", new UpdateEndpointData {Description = "My SIP account"});
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.IEndpoint.DeleteAsync(System.String,System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Remove the endpoint
            </summary>
            <param name="domainId">Id of endpoint's domain</param>
            <param name="endpointId">Id of endpoint to remove</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Task instance for async operation</returns>
            <example>
              <code>
            await client.Endpoint.DeleteAsync("domainId", "endpointId");
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.IEndpoint.CreateAuthTokenAsync(System.String,System.String,Bandwidth.Net.Api.CreateAuthTokenData,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Create auth token for the endpoint (usefull for client applications instead of using SIP account password directly)
            </summary>
            <param name="domainId">Id of endpoint's domain</param>
            <param name="endpointId">Id of endpoint</param>
            <param name="data">Optional parameters of new token</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Created auth token</returns>
            <example>
              <code>
            var token = await client.Endpoint.CreateAuthTokenAsync("domainId", "endpointId");
            </code>
            </example>
        </member>
        <member name="T:Bandwidth.Net.Api.Endpoint">
            <summary>
              Endpoint information
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Endpoint.Id">
            <summary>
              The unique identifier for the endpoint.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Endpoint.Name">
            <summary>
              Name of the endpoint
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Endpoint.Description">
            <summary>
              Description of the endpoint
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Endpoint.DomainId">
            <summary>
              Domain Id of the endpoint
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Endpoint.ApplicationId">
            <summary>
              Application Id of the endpoint
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Endpoint.Enabled">
            <summary>
              If endpoint enabled/disabled
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Endpoint.SipUri">
            <summary>
              SIP URI of the endpoint
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Endpoint.Credentials">
            <summary>
              Credentials data of the endpoint
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.EndpointCredentials">
            <summary>
              Credentials data of the endpoint
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.EndpointCredentials.Realm">
            <summary>
              Realm string
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.EndpointCredentials.UserName">
            <summary>
              User name
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.EndpointQuery">
            <summary>
              Query to get endpoints
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.EndpointQuery.Size">
            <summary>
              Used for pagination to indicate the size of each page requested for querying a list of endpoints. If no value is
              specified the default value is 25 (maximum value 1000).
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.CreateEndpointData">
            <summary>
              Parameters to create an endpoint
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateEndpointData.Name">
            <summary>
              Name of the endpoint
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateEndpointData.Description">
            <summary>
              Description of the endpoint
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateEndpointData.DomainId">
            <summary>
              Domain Id of the endpoint
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateEndpointData.ApplicationId">
            <summary>
              Application Id of the endpoint
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateEndpointData.Credentials">
            <summary>
              Credentials data
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.UpdateEndpointData">
            <summary>
              Parameters of a endpoint to change
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.UpdateEndpointData.Description">
            <summary>
              Description of the endpoint
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.UpdateEndpointData.ApplicationId">
            <summary>
              Application Id of the endpoint
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.UpdateEndpointData.Enabled">
            <summary>
              If endpoint enabled/disabled
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.UpdateEndpointData.Credentials">
            <summary>
              Credentials data
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.EndpointAuthToken">
            <summary>
              Endpoint auth token
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.EndpointAuthToken.Token">
            <summary>
              Token value
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.EndpointAuthToken.Expires">
            <summary>
              Expiration time of token in seconds
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.CreateAuthTokenData">
            <summary>
              Parameters to create new auth token for endpoint
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateAuthTokenData.Expires">
            <summary>
              Expiration time of token in seconds
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.CreateEndpointCredentials">
            <summary>
              Credentials data on creating endpoint
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreateEndpointCredentials.Password">
            <summary>
              Password for SIP account
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.UpdateEndpointCredentials">
            <summary>
              Credentials data on changing endpoint
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.IError">
            <summary>
              Access to Error Api
            </summary>
        </member>
        <member name="M:Bandwidth.Net.Api.IError.List(Bandwidth.Net.Api.ErrorQuery,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Get a list of errors
            </summary>
            <param name="query">Optional query parameters</param>
            <param name="cancellationToken">>Optional token to cancel async operation</param>
            <returns>Collection with <see cref="T:Bandwidth.Net.Api.Error" /> instances</returns>
            <example>
              <code>
            var errors = client.Error.List(); 
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.IError.GetAsync(System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Get information about an error
            </summary>
            <param name="errorId">Id of error to get</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Task with <see cref="T:Bandwidth.Net.Api.Error" />Error instance</returns>
            <example>
              <code>
            var error = await client.Error.GetAsync("errorId");
            </code>
            </example>
        </member>
        <member name="T:Bandwidth.Net.Api.Error">
            <summary>
              Error information
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Error.Id">
            <summary>
              The unique identifier for the error.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Error.Time">
            <summary>
              The time the error occurred
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Error.Category">
            <summary>
              The error category
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Error.Code">
            <summary>
              A specific error code string that identifies the type of error.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Error.Message">
            <summary>
              A message that describes the error condition in detail.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Error.Details">
            <summary>
              A list of name/value pairs of additional details that may help you debug the error.
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.ErrorCategory">
            <summary>
              Possible error categories
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.ErrorCategory.Authentication">
            <summary>
              Authentication
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.ErrorCategory.Authorization">
            <summary>
              Authorization
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.ErrorCategory.NotFound">
            <summary>
              NotFound
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.ErrorCategory.BadRequest">
            <summary>
              BadRequest
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.ErrorCategory.Conflict">
            <summary>
              Conflict
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.ErrorCategory.Unavailable">
            <summary>
              Unavailable
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.ErrorCategory.Credit">
            <summary>
              Credit
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.ErrorCategory.Limit">
            <summary>
              Limit
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.ErrorCategory.Payment">
            <summary>
              Payment
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.ErrorQuery">
            <summary>
              Query to get errors
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.ErrorQuery.Size">
            <summary>
              Used for pagination to indicate the size of each page requested for querying a list of errors. If no value is
              specified the default value is 25 (maximum value 1000).
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.ErrorDetail">
            <summary>
              Error detail (name/value pair)
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.ErrorDetail.Name">
            <summary>
              Name
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.ErrorDetail.Value">
            <summary>
              Value
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.IMedia">
            <summary>
              Access to Media Api
            </summary>
        </member>
        <member name="M:Bandwidth.Net.Api.IMedia.List(System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Get a list of media files
            </summary>
            <param name="cancellationToken">>Optional token to cancel async operation</param>
            <returns>Collection with <see cref="T:Bandwidth.Net.Api.MediaFile" /> instances</returns>
            <example>
              <code>
            var files = client.Media.List(); 
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.IMedia.UploadAsync(Bandwidth.Net.Api.UploadMediaFileData,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Upload a media file.
            </summary>
            <param name="data">Parameters of new media file</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Task instance for async operation</returns>
            <example>
              <code>
            await client.Media.UploadAsync(new UploadMediaData{ MediaName = "file.txt", String = "file content"});
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.IMedia.DownloadAsync(System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Download a media file
            </summary>
            <param name="mediaName">Name of media file to download</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Task with <see cref="T:Bandwidth.Net.Api.DownloadMediaFileData" /> instance</returns>
            <example>
              <code>
            using(var data = await client.Media.DownloadAsync("file.txt"))
            {
              var fileContent = await data.ReadAsStringAsync();
            }
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.IMedia.DeleteAsync(System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Remove a media file
            </summary>
            <param name="mediaName">Name of media file to remove</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Task instance for async operation</returns>
            <example>
              <code>
            await client.Media.DeleteAsync("file.txt");
            </code>
            </example>
        </member>
        <member name="T:Bandwidth.Net.Api.MediaFile">
            <summary>
              Media file information
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.MediaFile.MediaName">
            <summary>
              Name of media file
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.MediaFile.ContentLength">
            <summary>
            Length of media file
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.UploadMediaFileData">
            <summary>
            Data to upload media file
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.UploadMediaFileData.MediaName">
            <summary>
              Name of media file
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.UploadMediaFileData.ContentType">
            <summary>
            Content type of media file
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.UploadMediaFileData.Path">
            <summary>
              Path to file to upload
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.UploadMediaFileData.Buffer">
            <summary>
              Byte array to upload
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.UploadMediaFileData.Stream">
            <summary>
              Stream to upload
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.UploadMediaFileData.String">
            <summary>
              String to upload
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.DownloadMediaFileData">
            <summary>
            Downloaded media file data
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.DownloadMediaFileData.ContentLength">
            <summary>
            Length of media file
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.DownloadMediaFileData.ContentType">
            <summary>
            Content type of media file
            </summary>
        </member>
        <member name="M:Bandwidth.Net.Api.DownloadMediaFileData.ReadAsByteArrayAsync">
            <summary>
            Read content of downloaded file as byte array
            </summary>
            <returns>Byte array</returns>
        </member>
        <member name="M:Bandwidth.Net.Api.DownloadMediaFileData.ReadAsStreamAsync">
            <summary>
            Read content of downloaded file as stream
            </summary>
            <returns>Stream</returns>
        </member>
        <member name="M:Bandwidth.Net.Api.DownloadMediaFileData.ReadAsStringAsync">
            <summary>
            Read content of downloaded file as string
            </summary>
            <returns>String content of file</returns>
        </member>
        <member name="M:Bandwidth.Net.Api.DownloadMediaFileData.Dispose">
            <summary>
            Free allocated resources
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.IMessage">
            <summary>
              Access to Message Api
            </summary>
        </member>
        <member name="M:Bandwidth.Net.Api.IMessage.List(Bandwidth.Net.Api.MessageQuery,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Get a list of messages
            </summary>
            <param name="query">Optional query parameters</param>
            <param name="cancellationToken">>Optional token to cancel async operation</param>
            <returns>Collection with <see cref="T:Bandwidth.Net.Api.Message" /> instances</returns>
            <example>
              <code>
            var messages = client.Message.List(); 
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.IMessage.SendAsync(Bandwidth.Net.Api.MessageData,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Send a message.
            </summary>
            <param name="data">Parameters of new message</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Created message Id</returns>
            <example>
              <code>
            var messageId = await client.Message.SendAsync(new MessageData{ From = "from", To = "to", Text = "Hello"});
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.IMessage.SendAsync(Bandwidth.Net.Api.MessageData[],System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Send a message.
            </summary>
            <param name="data">Array of parameters of new messages</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Instance of created message</returns>
            <example>
              <code>
            var messages = await client.Message.SendAsync(new[]{new MessageData{ From = "from", To = "to", Text = "Hello"}});
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.IMessage.GetAsync(System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Get information about a message
            </summary>
            <param name="messageId">Id of message to get</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Task with <see cref="T:Bandwidth.Net.Api.Message" />Message instance</returns>
            <example>
              <code>
            var message = await client.Message.GetAsync("messageId");
            </code>
            </example>
        </member>
        <member name="T:Bandwidth.Net.Api.Message">
            <summary>
              Message information
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Message.Id">
            <summary>
              The unique identifier for the message.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Message.From">
            <summary>
            The message sender's telephone number (or short code).
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Message.To">
            <summary>
            Message recipient telephone number (or short code).
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Message.Direction">
            <summary>
            Direction of message
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Message.Text">
            <summary>
            The message contents.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Message.Media">
            <summary>
            Array containing list of media urls to be sent as content for an mms.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Message.State">
            <summary>
            Message state
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Message.Time">
            <summary>
            The time when the message was completed.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Message.CallbackUrl">
            <summary>
            The complete URL where the events related to the outgoing message will be sent.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Message.CallbackTimeout">
            <summary>
            Determine how long should the platform wait for callbackUrl's response before timing out (milliseconds).
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Message.FallbackUrl">
            <summary>
            The server URL used to send message events if the request to callbackUrl fails.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Message.Tag">
            <summary>
            A string that will be included in the callback events of the message.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Message.ReceiptRequested">
            <summary>
            Requested receipt option for outbound messages
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Message.DeliveryState">
            <summary>
            Message delivery state 
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Message.DeliveryCode">
            <summary>
            Numeric value of deliver code, see table for values.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Message.DeliveryDescription">
            <summary>
            Message delivery description for the respective delivery code
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.MessageState">
            <summary>
            Possible message states
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.MessageState.Received">
            <summary>
            The message was received.
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.MessageState.Queued">
            <summary>
            The message is waiting in queue and will be sent soon.
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.MessageState.Sending">
            <summary>
            The message was removed from queue and is being sent.
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.MessageState.Sent">
            <summary>
            The message was sent successfully.
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.MessageState.Error">
            <summary>
            There was an error sending or receiving a message (check errors resource for details).
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.MessageReceiptRequested">
            <summary>
            Requested receipt options for outbound messages
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.MessageReceiptRequested.None">
            <summary>
            Delivery receipt will not be sent as callback event.
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.MessageReceiptRequested.All">
            <summary>
            Success or error delivery receipt maybe sent as callback event.
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.MessageReceiptRequested.Error">
            <summary>
            Only error delivery receipt event maybe sent as callback event.
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.MessageDeliveryState">
            <summary>
            Possible delivery states
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.MessageDeliveryState.Waiting">
            <summary>
            Waiting for receipt.
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.MessageDeliveryState.Delivered">
            <summary>
            Receipt indicating that message was delivered.
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.MessageDeliveryState.NotDelivered">
            <summary>
            Receipt indicating that message was not delivered.
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.MessageDirection">
            <summary>
            Directions of message
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.MessageDirection.In">
            <summary>
            A message that came from the telephone network to one of your numbers (an "inbound" message)
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.MessageDirection.Out">
            <summary>
            A message that was sent from one of your numbers to the telephone network (an "outbound" message)
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.MessageQuery">
            <summary>
              Query to get messages
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.MessageQuery.From">
            <summary>
            The phone number to filter the messages that came from (must be in E.164 format, like +19195551212).
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.MessageQuery.To">
            <summary>
            The phone number to filter the messages that was sent to (must be in E.164 format, like +19195551212).
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.MessageQuery.FromDateTime">
            <summary>
            The starting date time to filter the messages
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.MessageQuery.ToDateTime">
            <summary>
            The ending date time to filter the messages
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.MessageQuery.Direction">
            <summary>
            Filter by direction of message
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.MessageQuery.State">
            <summary>
            The message state to filter. 
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.MessageQuery.DeliveryState">
            <summary>
            The message delivery state to filter. 
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.MessageQuery.SortOrder">
            <summary>
            How to sort the messages.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.MessageQuery.Size">
            <summary>
              Used for pagination to indicate the size of each page requested for querying a list of messages. If no value is
              specified the default value is 25 (maximum value 1000).
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.MessageData">
            <summary>
              Parameters to send an message
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.MessageData.From">
            <summary>
            The message sender's telephone number (or short code).
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.MessageData.To">
            <summary>
            Message recipient telephone number (or short code).
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.MessageData.Text">
            <summary>
            The message contents.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.MessageData.Media">
            <summary>
            Array containing list of media urls to be sent as content for an mms.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.MessageData.CallbackUrl">
            <summary>
            The complete URL where the events related to the outgoing message will be sent.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.MessageData.CallbackTimeout">
            <summary>
            Determine how long should the platform wait for callbackUrl's response before timing out (milliseconds).
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.MessageData.FallbackUrl">
            <summary>
            The server URL used to send message events if the request to callbackUrl fails.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.MessageData.Tag">
            <summary>
            A string that will be included in the callback events of the message.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.MessageData.ReceiptRequested">
            <summary>
            Requested receipt option for outbound messages
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.SendMessageResult">
            <summary>
            Rsult of batch send of some messages
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.SendMessageResult.Result">
            <summary>
            Operation result
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.SendMessageResult.Location">
            <summary>
            Url to new message
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.SendMessageResult.Id">
            <summary>
            Id of new message
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.SendMessageResult.Error">
            <summary>
            Error information (if Result is Error)
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.SendMessageResult.Message">
            <summary>
            Message data
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.SendMessageResults">
            <summary>
            Send message results
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.SendMessageResults.Accepted">
            <summary>
            Accepted
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.SendMessageResults.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.MessageQueryDateTime">
            <summary>
            Custom DateTime type to support specific serializing to string. It can be converted to/from date time implicitly
            </summary>
        </member>
        <member name="M:Bandwidth.Net.Api.MessageQueryDateTime.#ctor(System.DateTime)">
            <summary>
            Constructor
            </summary>
            <param name="time">DateTime instance</param>
        </member>
        <member name="M:Bandwidth.Net.Api.MessageQueryDateTime.op_Implicit(Bandwidth.Net.Api.MessageQueryDateTime)~System.DateTime">
            <summary>
            MessageQueryDateTime -> DateTime  implicit convert 
            </summary>
            <param name="time">Instance to convert</param>
        </member>
        <member name="M:Bandwidth.Net.Api.MessageQueryDateTime.op_Implicit(System.DateTime)~Bandwidth.Net.Api.MessageQueryDateTime">
            <summary>
            DateTime -> MessageQueryDateTime implicit convert
            </summary>
            <param name="time">Instance to convert</param>
        </member>
        <member name="M:Bandwidth.Net.Api.MessageQueryDateTime.ToString">
            <summary>
            Convert to string
            </summary>
            <returns>String presentation</returns>
        </member>
        <member name="T:Bandwidth.Net.Api.INumberInfo">
            <summary>
              Access to NumberInfo Api
            </summary>
        </member>
        <member name="M:Bandwidth.Net.Api.INumberInfo.GetAsync(System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Get the CNAM info of a number
            </summary>
            <param name="number">Phone number to get CNAM informations</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Task with <see cref="T:Bandwidth.Net.Api.NumberInfo" />NumberInfo instance</returns>
            <example>
              <code>
            var numberInfo = await client.NumberInfo.GetAsync("1234567890");
            </code>
            </example>
        </member>
        <member name="T:Bandwidth.Net.Api.NumberInfo">
            <summary>
              CNAM information
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.NumberInfo.Name">
            <summary>
              The Caller ID name information.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.NumberInfo.Number">
            <summary>
              The full phone number, specified in E.164 format.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.NumberInfo.Created">
            <summary>
              The time this Caller ID information was first queried
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.NumberInfo.Updated">
            <summary>
              The time this Caller ID information was last updated
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.IPhoneNumber">
            <summary>
              Access to PhoneNumber Api
            </summary>
        </member>
        <member name="M:Bandwidth.Net.Api.IPhoneNumber.List(Bandwidth.Net.Api.PhoneNumberQuery,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Get a list of users phone numbers
            </summary>
            <param name="query">Optional query parameters</param>
            <param name="cancellationToken">>Optional token to cancel async operation</param>
            <returns>Collection with <see cref="T:Bandwidth.Net.Api.PhoneNumber" /> instances</returns>
            <example>
              <code>
            var phoneNumbers = client.PhoneNumber.List(); 
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.IPhoneNumber.CreateAsync(Bandwidth.Net.Api.CreatePhoneNumberData,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Allocate a number so you can use it.
            </summary>
            <param name="data">Parameters of new phone number</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Created phone number id</returns>
            <example>
              <code>
            var phoneNumberId = await client.PhoneNumber.CreateAsync(new CreatePhoneNumberData{ Number = "+1234567890"});
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.IPhoneNumber.GetAsync(System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Get information about a phone number
            </summary>
            <param name="phoneNumberId">Id of phone number to get</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Task with <see cref="T:Bandwidth.Net.Api.PhoneNumber" />PhoneNumber instance</returns>
            <example>
              <code>
            var phoneNumber = await client.PhoneNumber.GetAsync("phoneNumberId");
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.IPhoneNumber.UpdateAsync(System.String,Bandwidth.Net.Api.UpdatePhoneNumberData,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Make changes to a number
            </summary>
            <param name="phoneNumberId">Id of phoneNumber to change</param>
            <param name="data">Changed data</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Task instance for async operation</returns>
            <example>
              <code>
            await client.PhoneNumber.UpdateAsync("phoneNumberId", new UpdatePhoneNumberData {ApplicationId = "appId"});
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.IPhoneNumber.DeleteAsync(System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Remove a phone number
            </summary>
            <param name="phoneNumberId">Id of phoneNumber to remove</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Task instance for async operation</returns>
            <example>
              <code>
            await client.PhoneNumber.DeleteAsync("phoneNumberId");
            </code>
            </example>
        </member>
        <member name="T:Bandwidth.Net.Api.PhoneNumber">
            <summary>
              Phone number information
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.PhoneNumber.Id">
            <summary>
              The unique identifier for the phone number.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.PhoneNumber.Name">
            <summary>
              A name you choose for this number.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.PhoneNumber.Number">
            <summary>
              The telephone number in E.164 format.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.PhoneNumber.NationalNumber">
            <summary>
              The telephone number in a friendly national format, e.g. (555) 5555-5555
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.PhoneNumber.City">
            <summary>
              The city of the phone number.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.PhoneNumber.State">
            <summary>
              The state of the phone number.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.PhoneNumber.ApplicationId">
            <summary>
              The unique id of an Application you want to associate with this number.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.PhoneNumber.FallbackNumber">
            <summary>
              Number to transfer an incoming call when the callback/fallback events can't be delivered.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.PhoneNumber.Price">
            <summary>
              The monthly price for this number.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.PhoneNumber.CreatedTime">
            <summary>
              Date when the number was created.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.PhoneNumber.NumberState">
            <summary>
              The phone number state
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.CreatePhoneNumberData">
            <summary>
              Parameters to create an phone number
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreatePhoneNumberData.Name">
            <summary>
              A name you choose for this number.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreatePhoneNumberData.Number">
            <summary>
              The telephone number in E.164 format.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreatePhoneNumberData.ApplicationId">
            <summary>
              The unique id of an Application you want to associate with this number.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.CreatePhoneNumberData.FallbackNumber">
            <summary>
              Number to transfer an incoming call when the callback/fallback events can't be delivered.
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.UpdatePhoneNumberData">
            <summary>
              Parameters of a phone number to change
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.UpdatePhoneNumberData.Name">
            <summary>
              A name you choose for this number.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.UpdatePhoneNumberData.ApplicationId">
            <summary>
              The unique id of an Application you want to associate with this number.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.UpdatePhoneNumberData.FallbackNumber">
            <summary>
              Number to transfer an incoming call when the callback/fallback events can't be delivered.
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.PhoneNumberState">
            <summary>
              Phone number states
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.PhoneNumberState.Enabled">
            <summary>
              Active number
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.PhoneNumberState.Released">
            <summary>
              Released number
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.PhoneNumberQuery">
            <summary>
              Query to get phone numbers
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.PhoneNumberQuery.Size">
            <summary>
              Used for pagination to indicate the size of each page requested for querying a list of numbers. If no value is
              specified the default value is 25 (maximum value 1000).
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.PhoneNumberQuery.ApplicationId">
            <summary>
              Used to filter the retrieved list of numbers by an associated application ID.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.PhoneNumberQuery.State">
            <summary>
              Used to filter the retrieved list of numbers allocated for the authenticated user by a US state.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.PhoneNumberQuery.Name">
            <summary>
              Used to filter the retrieved list of numbers allocated for the authenticated user by it's name.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.PhoneNumberQuery.City">
            <summary>
              Used to filter the retrieved list of numbers allocated for the authenticated user by it's city.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.PhoneNumberQuery.NumberState">
            <summary>
              Used to filter the retrieved list of numbers allocated for the authenticated user by the number state.
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.IRecording">
            <summary>
            Access to Recording Api
            </summary>
        </member>
        <member name="M:Bandwidth.Net.Api.IRecording.List(Bandwidth.Net.Api.RecordingQuery,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Get a list of recordings
            </summary>
            <param name="query">Optional query parameters</param>
            <param name="cancellationToken">>Optional token to cancel async operation</param>
            <returns>Collection with <see cref="T:Bandwidth.Net.Api.Recording" /> instances</returns>
            <example>
              <code>
            var recordings = client.Recording.List(); 
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.IRecording.GetAsync(System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Get information about a recording
            </summary>
            <param name="recordingId">Id of recording to get</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Task with <see cref="T:Bandwidth.Net.Api.Recording" />Recording instance</returns>
            <example>
              <code>
            var recording = await client.Recording.GetAsync("recordingId");
            </code>
            </example>
        </member>
        <member name="T:Bandwidth.Net.Api.Recording">
            <summary>
            Recording data
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Recording.Id">
            <summary>
            The unique id of the recordings resource.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Recording.StartTime">
            <summary>
            Date/time when the recording started.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Recording.EndTime">
            <summary>
            Date/time when the recording ended. 
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Recording.Call">
            <summary>
            The complete URL to the call resource this recording is associated with.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Recording.CallId">
            <summary>
            Id of associated call
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Recording.Media">
            <summary>
            The complete URL to the media resource this recording is associated with.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Recording.MediaName">
            <summary>
            Name of associated media resource
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Recording.State">
            <summary>
            The state of the recording,
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.RecordingQuery">
            <summary>
              Query to get bridges
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.RecordingQuery.Size">
            <summary>
              Used for pagination to indicate the size of each page requested for querying a list of recordings. If no value is
              specified the default value is 25 (maximum value 1000).
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.RecordingState">
            <summary>
            States of recording
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.RecordingState.Recording">
            <summary>
            Recording is currently active.
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.RecordingState.Complete">
            <summary>
            Recording complete and available for downloading or playing.
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.RecordingState.Saving">
            <summary>
            Recording is complete but it is not available to download yet.
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.RecordingState.Error">
            <summary>
            Recording could not be uploaded
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.ITranscription">
            <summary>
              Access to Transcription Api
            </summary>
        </member>
        <member name="M:Bandwidth.Net.Api.ITranscription.List(System.String,Bandwidth.Net.Api.TranscriptionQuery,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Get a list of transcriptions
            </summary>
            <param name="recordingId">Id of the recording</param>
            <param name="query">Optional query parameters</param>
            <param name="cancellationToken">>Optional token to cancel async operation</param>
            <returns>Collection with <see cref="T:Bandwidth.Net.Api.Transcription" /> instances</returns>
            <example>
              <code>
            var transcriptions = client.Transcription.List("recordingId"); 
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.ITranscription.CreateAsync(System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Create a transcription.
            </summary>
            <param name="recordingId">Id of the recording</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Created transcription Id</returns>
            <example>
              <code>
            var transcriptionId = await client.Transcription.CreateAsync("recordingId");
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.Api.ITranscription.GetAsync(System.String,System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Get information about a transcription
            </summary>
            <param name="recordingId">Id of the recording</param>
            <param name="transcriptionId">Id of transcription to get</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>Task with <see cref="T:Bandwidth.Net.Api.Transcription" />Transcription instance</returns>
            <example>
              <code>
            var transcription = await client.Transcription.GetAsync("recordingId", "transcriptionId");
            </code>
            </example>
        </member>
        <member name="T:Bandwidth.Net.Api.Transcription">
            <summary>
              Transcription data
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Transcription.Id">
            <summary>
              The unique id of the transcriptions resource.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Transcription.State">
            <summary>
            The state of the transcription
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Transcription.Text">
            <summary>
            The transcribed text.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Transcription.Time">
            <summary>
            The date/time the transcription resource was created
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Transcription.ChargeableDuration">
            <summary>
            The seconds between activeTime and endTime for the recording; this is the time that is going to be used to charge the resource.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Transcription.TextSize">
            <summary>
            The size of the transcribed text. If the text is longer than 1000 characters it will be cropped; the full text can be retrieved from the url available at textUrl property.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Transcription.TextUrl">
            <summary>
            An url to the full text; this property is available regardless the textSize.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.Transcription.TextMediaName">
            <summary>
            Media name of full text file
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.TranscriptionQuery">
            <summary>
              Query to get transcriptions
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Api.TranscriptionQuery.Size">
            <summary>
              Used for pagination to indicate the size of each page requested for querying a list of transcriptions. If no value is
              specified the default value is 25 (maximum value 1000).
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Api.TranscriptionState">
            <summary>
            States of transcription
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.TranscriptionState.Transcribing">
            <summary>
            Transcribing
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.TranscriptionState.Completed">
            <summary>
            Completed
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Api.TranscriptionState.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="T:Bandwidth.Net.CallbackEvent">
            <summary>
              Catapult Api callback event
            </summary>
            <example>
            <code>
            var callbackEvent = CallbackEvent.CreateFromJson("{\"eventType\": \"sms\"}");
            switch(callbackEvent.EventType)
            {
              case CallbackEventType.Sms:
                Console.WriteLine($"Sms {callbackEvent.From} -> {callbackEvent.To}: {callbackEvent.Text}");
                break;
            }
            </code>
            </example>
        </member>
        <member name="P:Bandwidth.Net.CallbackEvent.EventType">
            <summary>
              Event type
            </summary>
        </member>
        <member name="P:Bandwidth.Net.CallbackEvent.Direction">
            <summary>
              Message direction
            </summary>
        </member>
        <member name="P:Bandwidth.Net.CallbackEvent.From">
            <summary>
              From
            </summary>
        </member>
        <member name="P:Bandwidth.Net.CallbackEvent.To">
            <summary>
              To
            </summary>
        </member>
        <member name="P:Bandwidth.Net.CallbackEvent.MessageId">
            <summary>
              Id of message
            </summary>
        </member>
        <member name="P:Bandwidth.Net.CallbackEvent.MessageUri">
            <summary>
              Url to message
            </summary>
        </member>
        <member name="P:Bandwidth.Net.CallbackEvent.Text">
            <summary>
              Text of message or transcription
            </summary>
        </member>
        <member name="P:Bandwidth.Net.CallbackEvent.ApplicationId">
            <summary>
              Application Id
            </summary>
        </member>
        <member name="P:Bandwidth.Net.CallbackEvent.Time">
            <summary>
              Time
            </summary>
        </member>
        <member name="P:Bandwidth.Net.CallbackEvent.State">
            <summary>
              State
            </summary>
        </member>
        <member name="P:Bandwidth.Net.CallbackEvent.DeliveryState">
            <summary>
              Delivery state of message
            </summary>
        </member>
        <member name="P:Bandwidth.Net.CallbackEvent.DeliveryCode">
            <summary>
              Delivery code of message
            </summary>
        </member>
        <member name="P:Bandwidth.Net.CallbackEvent.DeliveryDescription">
            <summary>
              Delivery description of message
            </summary>
        </member>
        <member name="P:Bandwidth.Net.CallbackEvent.Media">
            <summary>
              Urls to attached media files to message
            </summary>
        </member>
        <member name="P:Bandwidth.Net.CallbackEvent.CallState">
            <summary>
              Call state
            </summary>
        </member>
        <member name="P:Bandwidth.Net.CallbackEvent.CallId">
            <summary>
              Id of call
            </summary>
        </member>
        <member name="P:Bandwidth.Net.CallbackEvent.CallUri">
            <summary>
              Url to the call
            </summary>
        </member>
        <member name="P:Bandwidth.Net.CallbackEvent.Tag">
            <summary>
              Tag
            </summary>
        </member>
        <member name="P:Bandwidth.Net.CallbackEvent.Status">
            <summary>
              Status
            </summary>
        </member>
        <member name="P:Bandwidth.Net.CallbackEvent.ConferenceId">
            <summary>
              If of conference
            </summary>
        </member>
        <member name="P:Bandwidth.Net.CallbackEvent.ConferenceUri">
            <summary>
              Url to the conference
            </summary>
        </member>
        <member name="P:Bandwidth.Net.CallbackEvent.CreatedTime">
            <summary>
              Created time of the conference
            </summary>
        </member>
        <member name="P:Bandwidth.Net.CallbackEvent.CompletedTime">
            <summary>
              Completed time of the conference
            </summary>
        </member>
        <member name="P:Bandwidth.Net.CallbackEvent.ActiveMembers">
            <summary>
              Active members count of the conference
            </summary>
        </member>
        <member name="P:Bandwidth.Net.CallbackEvent.MemberId">
            <summary>
              Id of conference member
            </summary>
        </member>
        <member name="P:Bandwidth.Net.CallbackEvent.MemberUri">
            <summary>
              Url to the conference member
            </summary>
        </member>
        <member name="P:Bandwidth.Net.CallbackEvent.Hold">
            <summary>
              Members is on hold in conference and can not hear or speak.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.CallbackEvent.Mute">
            <summary>
              Members audio is muted in conference.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.CallbackEvent.Digits">
            <summary>
              The digits pressed
            </summary>
        </member>
        <member name="P:Bandwidth.Net.CallbackEvent.DtmfDigit">
            <summary>
              The digit pressed (for DTMF event)
            </summary>
        </member>
        <member name="P:Bandwidth.Net.CallbackEvent.GatherId">
            <summary>
              Id of gather
            </summary>
        </member>
        <member name="P:Bandwidth.Net.CallbackEvent.Reason">
            <summary>
              Reason
            </summary>
        </member>
        <member name="P:Bandwidth.Net.CallbackEvent.Cause">
            <summary>
              Cause of call termination
            </summary>
        </member>
        <member name="P:Bandwidth.Net.CallbackEvent.RecordingId">
            <summary>
              Id of recording
            </summary>
        </member>
        <member name="P:Bandwidth.Net.CallbackEvent.RecordingUri">
            <summary>
              Url to the recording
            </summary>
        </member>
        <member name="P:Bandwidth.Net.CallbackEvent.StartTime">
            <summary>
              Created time of the recording
            </summary>
        </member>
        <member name="P:Bandwidth.Net.CallbackEvent.EndTime">
            <summary>
              Completed time of the recording
            </summary>
        </member>
        <member name="P:Bandwidth.Net.CallbackEvent.TranscriptionId">
            <summary>
              Id of transcription
            </summary>
        </member>
        <member name="P:Bandwidth.Net.CallbackEvent.TranscriptionUri">
            <summary>
              Url to the transcription
            </summary>
        </member>
        <member name="P:Bandwidth.Net.CallbackEvent.TextSize">
            <summary>
              Total character count of text.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.CallbackEvent.TextUrl">
            <summary>
              The full URL of the entire text content of the transcription.
            </summary>
        </member>
        <member name="M:Bandwidth.Net.CallbackEvent.CreateFromJson(System.String)">
            <summary>
              Create instance from JSON string
            </summary>
            <param name="json">JSON string with callback event data</param>
            <returns>New instance of CallbackEvent</returns>
        </member>
        <member name="T:Bandwidth.Net.CallbackEventType">
            <summary>
              Possible event types
            </summary>
        </member>
        <member name="F:Bandwidth.Net.CallbackEventType.Unknown">
            <summary>
              Unknown type
            </summary>
        </member>
        <member name="F:Bandwidth.Net.CallbackEventType.Sms">
            <summary>
              Sms
            </summary>
        </member>
        <member name="F:Bandwidth.Net.CallbackEventType.Mms">
            <summary>
              Mms
            </summary>
        </member>
        <member name="F:Bandwidth.Net.CallbackEventType.Answer">
            <summary>
              Answer call
            </summary>
        </member>
        <member name="F:Bandwidth.Net.CallbackEventType.Playback">
            <summary>
              Playback uadio
            </summary>
        </member>
        <member name="F:Bandwidth.Net.CallbackEventType.Timeout">
            <summary>
              Call timeout
            </summary>
        </member>
        <member name="F:Bandwidth.Net.CallbackEventType.Conference">
            <summary>
              Conference
            </summary>
        </member>
        <member name="F:Bandwidth.Net.CallbackEventType.ConferencePlayback">
            <summary>
              Play audio to the conference
            </summary>
        </member>
        <member name="F:Bandwidth.Net.CallbackEventType.ConferenceMember">
            <summary>
              Conference member
            </summary>
        </member>
        <member name="F:Bandwidth.Net.CallbackEventType.ConferenceSpeak">
            <summary>
              Speak text to the conference
            </summary>
        </member>
        <member name="F:Bandwidth.Net.CallbackEventType.Dtmf">
            <summary>
              DTMF
            </summary>
        </member>
        <member name="F:Bandwidth.Net.CallbackEventType.Gather">
            <summary>
              Gather
            </summary>
        </member>
        <member name="F:Bandwidth.Net.CallbackEventType.Incomingcall">
            <summary>
              Incoming call
            </summary>
        </member>
        <member name="F:Bandwidth.Net.CallbackEventType.Hangup">
            <summary>
              Call completed
            </summary>
        </member>
        <member name="F:Bandwidth.Net.CallbackEventType.Recording">
            <summary>
              Recording
            </summary>
        </member>
        <member name="F:Bandwidth.Net.CallbackEventType.Speak">
            <summary>
              Speak text
            </summary>
        </member>
        <member name="F:Bandwidth.Net.CallbackEventType.Transcription">
            <summary>
              Transcription
            </summary>
        </member>
        <member name="T:Bandwidth.Net.CallbackEventStatus">
            <summary>
              Possible statuses of calback events
            </summary>
        </member>
        <member name="F:Bandwidth.Net.CallbackEventStatus.Started">
            <summary>
              Started
            </summary>
        </member>
        <member name="F:Bandwidth.Net.CallbackEventStatus.Done">
            <summary>
              Done
            </summary>
        </member>
        <member name="F:Bandwidth.Net.CallbackEventStatus.Created">
            <summary>
              Created
            </summary>
        </member>
        <member name="F:Bandwidth.Net.CallbackEventStatus.Completed">
            <summary>
              Completed
            </summary>
        </member>
        <member name="F:Bandwidth.Net.CallbackEventStatus.Complete">
            <summary>
              Complete
            </summary>
        </member>
        <member name="F:Bandwidth.Net.CallbackEventStatus.Error">
            <summary>
              Error
            </summary>
        </member>
        <member name="T:Bandwidth.Net.CallbackEventState">
            <summary>
              Callback event states
            </summary>
        </member>
        <member name="F:Bandwidth.Net.CallbackEventState.Active">
            <summary>
              Active
            </summary>
        </member>
        <member name="F:Bandwidth.Net.CallbackEventState.Completed">
            <summary>
              Completed
            </summary>
        </member>
        <member name="F:Bandwidth.Net.CallbackEventState.Received">
            <summary>
              Received
            </summary>
        </member>
        <member name="F:Bandwidth.Net.CallbackEventState.Queued">
            <summary>
              Queued
            </summary>
        </member>
        <member name="F:Bandwidth.Net.CallbackEventState.Sending">
            <summary>
              Sending
            </summary>
        </member>
        <member name="F:Bandwidth.Net.CallbackEventState.Sent">
            <summary>
              Sent
            </summary>
        </member>
        <member name="F:Bandwidth.Net.CallbackEventState.Complete">
            <summary>
              Complete
            </summary>
        </member>
        <member name="F:Bandwidth.Net.CallbackEventState.Error">
            <summary>
              Error
            </summary>
        </member>
        <member name="F:Bandwidth.Net.CallbackEventState.PlaybackStart">
            <summary>
              Start of playback
            </summary>
        </member>
        <member name="F:Bandwidth.Net.CallbackEventState.PlaybackStop">
            <summary>
              End of playback
            </summary>
        </member>
        <member name="T:Bandwidth.Net.CallbackEventReason">
            <summary>
              Possible reasons of calback events
            </summary>
        </member>
        <member name="F:Bandwidth.Net.CallbackEventReason.MaxDigits">
            <summary>
              Max digits reached
            </summary>
        </member>
        <member name="F:Bandwidth.Net.CallbackEventReason.TerminatingDigit">
            <summary>
              Terminating digit
            </summary>
        </member>
        <member name="F:Bandwidth.Net.CallbackEventReason.InterDigitTimeout">
            <summary>
              Interdigit timeout
            </summary>
        </member>
        <member name="F:Bandwidth.Net.CallbackEventReason.HungUp">
            <summary>
              Hung up
            </summary>
        </member>
        <member name="T:Bandwidth.Net.CallbackEventHelpers">
            <summary>
              Helper for HttpContent to parse CallbackEvent
            </summary>
        </member>
        <member name="M:Bandwidth.Net.CallbackEventHelpers.ReadAsCallbackEventAsync(System.Net.Http.HttpContent)">
            <summary>
              Read CallbackEvent instance from http content
            </summary>
            <param name="content">Content</param>
            <returns>Callback event data or null if response content is not json</returns>
            <example>
            <code>
            var callbackEvent = await request.Content.ReadAsCallbackEventAsync(); // response is instance of HttpRequestMessage
            switch(callbackEvent.EventType)
            {
              case CallbackEventType.Sms:
                Console.WriteLine($"Sms {callbackEvent.From} -> {callbackEvent.To}: {callbackEvent.Text}");
                break;
            }
            </code>
            </example>
        </member>
        <member name="T:Bandwidth.Net.Client">
            <summary>
            Catapult API client
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Client.Error">
            <summary>
            Access to Error Api
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Client.Account">
            <summary>
            Access to Account Api
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Client.Application">
            <summary>
            Access to Application Api
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Client.AvailableNumber">
            <summary>
            Access to AvailableNumber Api
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Client.Bridge">
            <summary>
            Access to Bridge Api
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Client.Domain">
            <summary>
            Access to Domain Api
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Client.Call">
            <summary>
            Access to Call Api
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Client.Conference">
            <summary>
            Access to Conference Api
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Client.Message">
            <summary>
            Access to Message Api
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Client.NumberInfo">
            <summary>
            Access to NumberInfo Api
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Client.PhoneNumber">
            <summary>
            Access to PhoneNumber Api
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Client.Recording">
            <summary>
            Access to Recording Api
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Client.Transcription">
            <summary>
            Access to Transcription Api
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Client.Media">
            <summary>
            Access to Media Api
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Client.Endpoint">
            <summary>
            Access to Endpoint Api
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Client.V2">
            <summary>
            API v2 features
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Client.ApiV2">
            <summary>
            APIs v2
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Client.ApiV2.Message">
            <summary>
            Access to Message Api
            </summary>
        </member>
        <member name="M:Bandwidth.Net.Client.#ctor(System.String,System.String,System.String,System.String,Bandwidth.Net.IHttp)">
            <summary>
            Constructor
            </summary>
            <param name="userId">Id of user on Catapult API</param>
            <param name="apiToken">Authorization token of Catapult API</param>
            <param name="apiSecret">Authorization secret of Catapult API</param>
            <param name="baseUrl">Base url of Catapult API server</param>
            <param name="http">Optional processor of http requests. Use it to owerwrite default http request processing (useful for test, logs, etc)</param>
            <example>
            Regular usage
            <code>
            var client = new Client("userId", "apiToken", "apiSecret");
            </code>
            
            Using another server
            <code>
            var client = new Client("userId", "apiToken", "apiSecret", "https://another.server");
            </code>
            
            Using with own implementaion of HTTP processing (usefull for tests)
            <code>
            var client = new Client("userId", "apiToken", "apiSecret", "https://another.server", new YourMockHttp());
            </code>
            </example>
        </member>
        <member name="T:Bandwidth.Net.DefaultConverter">
            <summary>
            Default Json converter (without changing names)
            </summary>
        </member>
        <member name="M:Bandwidth.Net.DefaultConverter.CanConvert(System.Type)">
            <summary>
            CanConvert
            </summary>
            <param name="objectType">Type of converted object</param>
            <returns></returns>
        </member>
        <member name="M:Bandwidth.Net.DefaultConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            ReadJson
            </summary>
            <param name="reader">reader</param>
            <param name="objectType">objectType</param>
            <param name="existingValue">existingValue</param>
            <param name="serializer">serializer</param>
            <returns></returns>
        </member>
        <member name="M:Bandwidth.Net.DefaultConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            WriteJson
            </summary>
            <param name="writer">writer</param>
            <param name="value">value</param>
            <param name="serializer">serializer</param>
        </member>
        <member name="T:Bandwidth.Net.MissingCredentialsException">
            <summary>
            MissingCredentialsException
            </summary>
        </member>
        <member name="M:Bandwidth.Net.MissingCredentialsException.#ctor">
            <summary>
            MissingCredentialsException
            </summary>
        </member>
        <member name="T:Bandwidth.Net.InvalidBaseUrlException">
            <summary>
            InvalidBaseUrlException
            </summary>
        </member>
        <member name="M:Bandwidth.Net.InvalidBaseUrlException.#ctor">
            <summary>
            InvalidBaseUrlException
            </summary>
        </member>
        <member name="T:Bandwidth.Net.BandwidthException">
            <summary>
            BandwidthException
            </summary>
        </member>
        <member name="P:Bandwidth.Net.BandwidthException.Code">
            <summary>
            Status code
            </summary>
        </member>
        <member name="M:Bandwidth.Net.BandwidthException.#ctor(System.String,System.Net.HttpStatusCode)">
            <summary>
            BandwidthException
            </summary>
            <param name="message">Error message</param>
            <param name="code">Status code</param>
        </member>
        <member name="T:Bandwidth.Net.RateLimitException">
            <summary>
            RateLimitException
            </summary>
        </member>
        <member name="P:Bandwidth.Net.RateLimitException.ResetTime">
            <summary>
            Time after which your rate limit should be cleared
            </summary>
        </member>
        <member name="M:Bandwidth.Net.RateLimitException.#ctor(System.DateTime)">
            <summary>
            RateLimitException
            </summary>
            <param name="resetTime">Time after which your rate limit should be cleared</param>
        </member>
        <member name="T:Bandwidth.Net.IHttp">
            <summary>
              Http request processor interface.
            </summary>
            <remarks>
              Implement own class with this interface to overwrite default http request processing (usefull for tests, logs, etc.)
            </remarks>
        </member>
        <member name="M:Bandwidth.Net.IHttp.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Send http request and return response message
            </summary>
            <param name="request">Request message to send</param>
            <param name="completionOption">
              Indicates if current http operation should be considered completed either as soon as a
              response is available, or after reading the entire response message including the content.
            </param>
            <param name="cancellationToken">Cancelation token for current async operation</param>
            <returns>Task with response message</returns>
        </member>
        <member name="T:Bandwidth.Net.IPlayAudio">
            <summary>
              Add ability to play audio
            </summary>
        </member>
        <member name="M:Bandwidth.Net.IPlayAudio.PlayAudioAsync(System.String,Bandwidth.Net.PlayAudioData,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Play audio
            </summary>
            <param name="id">ID of bridge, call, conference, etc</param>
            <param name="data">Parameters for play audio</param>
            <param name="cancellationToken">Optional token to cancel async operation</param>
            <returns>>Task instance for async operation</returns>
            <example>
              <code>
            await client.Bridge.PlayAudioAsync("bridgeId", new PlayAudioData {FileUrl = "url"}); 
            </code>
            </example>
        </member>
        <member name="T:Bandwidth.Net.PlayAudioData">
            <summary>
              Data for play audio operation
            </summary>
        </member>
        <member name="P:Bandwidth.Net.PlayAudioData.FileUrl">
            <summary>
              The location of an audio file to play (WAV and MP3 supported).
            </summary>
        </member>
        <member name="P:Bandwidth.Net.PlayAudioData.Sentence">
            <summary>
              The sentence to speak.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.PlayAudioData.Gender">
            <summary>
              The gender of the voice used to synthesize the sentence. It will be considered only if sentence is not null. The
              female gender will be used by default.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.PlayAudioData.Locale">
            <summary>
              The locale used to get the accent of the voice used to synthesize the sentence.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.PlayAudioData.Voice">
            <summary>
              The voice to speak the sentence.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.PlayAudioData.LoopEnabled">
            <summary>
              When value is true, the audio will keep playing in a loop. Default: false.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.PlayAudioData.Tag">
            <summary>
              A string that will be included in the events delivered when the audio playback starts or finishes
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Gender">
            <summary>
            Genders
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Gender.Male">
            <summary>
            Male
            </summary>
        </member>
        <member name="F:Bandwidth.Net.Gender.Female">
            <summary>
            Female
            </summary>
        </member>
        <member name="T:Bandwidth.Net.PlayAudioExtensions">
            <summary>
              Usefull extension methods for IPlayAudio
            </summary>
        </member>
        <member name="M:Bandwidth.Net.PlayAudioExtensions.SpeakSentenceAsync(Bandwidth.Net.IPlayAudio,System.String,System.String,Bandwidth.Net.Gender,System.String,System.String,System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Speak a sentence
            </summary>
            <param name="instance">Instance of <see cref="T:Bandwidth.Net.IPlayAudio" /></param>
            <param name="id">ID of bridge, call, conference, etc</param>
            <param name="sentence">The sentence to speak</param>
            <param name="gender">The gender of the voice used to synthesize the sentence.</param>
            <param name="voice">The voice to speak the sentence.</param>
            <param name="locale">The locale used to get the accent of the voice used to synthesize the sentence.</param>
            <param name="tag">A string that will be included in the events delivered when the audio playback starts or finishes</param>
            <param name="cancellationToken">
              Optional token to cancel async operation</param>
            <returns>Task instance for async operation</returns>
            <example>
              <code>
            await client.Bridge.SpeakSentenceAsync("bridgeId", "Hello");
            </code>
            </example>
        </member>
        <member name="M:Bandwidth.Net.PlayAudioExtensions.PlayAudioFileAsync(Bandwidth.Net.IPlayAudio,System.String,System.String,System.String,System.Nullable{System.Threading.CancellationToken})">
            <summary>
              Play audio file by url
            </summary>
            <param name="instance">>Instance of <see cref="T:Bandwidth.Net.IPlayAudio" /></param>
            <param name="id">ID of bridge, call, conference, etc</param>
            <param name="fileUrl">Url to file to play</param>
            <param name="tag">A string that will be included in the events delivered when the audio playback starts or finishes</param>
            <param name="cancellationToken">
              Optional token to cancel async operation</param>
            <returns>Task instance for async operation</returns>
            <example>
              <code>
            await client.Bridge.PlayAudioFileAsync("bridgeId", "http://host/path/to/file.mp3");
            </code>
            </example>
        </member>
        <member name="T:Bandwidth.Net.Xml.BandwidthXmlContent">
             <summary>
               BandwidthXML content for HttpResponseMessage
             </summary>
             <example>
             <code>
             var response = new HttpResponseMessage();
             response.Content = new BandwidthXmlContent(new Response( new Hangup() )); // will generate next xml lines 
             /*
             <Response>
              <Hangup></Hangup>
            </Response>
             */
             </code>
             </example>
        </member>
        <member name="M:Bandwidth.Net.Xml.BandwidthXmlContent.#ctor(Bandwidth.Net.Xml.Response)">
            <summary>
              Constructor
            </summary>
            <param name="bxmlResponse">BXML response object</param>
        </member>
        <member name="T:Bandwidth.Net.Xml.IVerb">
            <summary>
              Should be implemented by all verb classes
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Xml.Response">
            <summary>
              Response class for Bandwidth XML
            </summary>
        </member>
        <member name="M:Bandwidth.Net.Xml.Response.#ctor">
            <summary>
              Default constructor
            </summary>
        </member>
        <member name="M:Bandwidth.Net.Xml.Response.#ctor(Bandwidth.Net.Xml.IVerb[])">
            <summary>
              Constructor with verbs
            </summary>
            <param name="verbs">verbs to be added to response</param>
        </member>
        <member name="M:Bandwidth.Net.Xml.Response.Add(Bandwidth.Net.Xml.IVerb)">
            <summary>
              Add new verb to response
            </summary>
            <param name="verb">verb instance</param>
        </member>
        <member name="M:Bandwidth.Net.Xml.Response.ToXml">
            <summary>
              Returns XML for response
            </summary>
            <returns>Generated XML string</returns>
        </member>
        <member name="T:Bandwidth.Net.Xml.Verbs.Call">
            <summary>
              The Call verb is used to create call to another number.
            </summary>
            <seealso href="http://ap.bandwidth.com/docs/xml/call/" />
        </member>
        <member name="M:Bandwidth.Net.Xml.Verbs.Call.#ctor">
            <summary>
              Constructor
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.Call.From">
            <summary>
              Defines the number the call will be created from.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.Call.To">
            <summary>
              Defines the number the call will be called to.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.Call.Timeout">
            <summary>
              This is the timeout (seconds) for the call to answer
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.Call.RequestUrlTimeout">
            <summary>
              Integer time in milliseconds to wait for requestUrl response
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.Call.RequestUrl">
            <summary>
              Relative or absolute URL to send event and request new BXML document when call is answered or call is hung up.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.Call.PhoneNumbers">
            <summary>
              A collection of phone numbers to transfer the call to.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.Call.Tag">
            <summary>
            Additional data for the call
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.Call.PlayAudio">
            <summary>
            PlayAudio sub-verb
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.Call.Record">
            <summary>
            Record sub-verb
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.Call.SpeakSentence">
            <summary>
            SpeakSentence sub-verb
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Xml.Verbs.Conference">
            <summary>
              The Conference verb is used to create conferences.
            </summary>
            <seealso href="http://ap.bandwidth.com/docs/xml/conference/" />
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.Conference.From">
            <summary>
              The phone number that will host the conference.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.Conference.StatusCallbackUrl">
            <summary>
              URL where the events related to the Conference will be sent through POST.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.Conference.JoinTone">
            <summary>
              If "true", will play a tone when the member joins the conference. If "false", no tone is played when the member joins
              the conference.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.Conference.LeavingTone">
            <summary>
              If "true", will play a tone when the member leaves the conference. If "false", no tone is played when the member
              leaves the conference.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.Conference.Mute">
            <summary>
              If "true", the member will join in mute and will be able to hear unmuted participants.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.Conference.Hold">
            <summary>
              If "true", the member will join in hold.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.Conference.Tag">
            <summary>
              A string that will be included in the callback events of the conference.
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Xml.Verbs.Gather">
            <summary>
              The Gather verb is used to collect digits for some period of time.
            </summary>
            <seealso href="http://ap.bandwidth.com/docs/xml/gather/" />
        </member>
        <member name="M:Bandwidth.Net.Xml.Verbs.Gather.#ctor">
            <summary>
              Constructor
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.Gather.RequestUrl">
            <summary>
              Relative or absolute URL to send event to and request
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.Gather.RequestUrlTimeout">
            <summary>
              Integer time in milliseconds to wait for requestUrl response
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.Gather.TerminatingDigits">
            <summary>
              Digits to stop gather
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.Gather.MaxDigits">
            <summary>
              Quantity of digits to collect
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.Gather.InterDigitTimeout">
            <summary>
              Integer time indicating the timeout between digits
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.Gather.Bargeable">
            <summary>
              Boolean to indicate if audio playback should be stopped when digit is pressed
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.Gather.SpeakSentence">
            <summary>
             Using the SpeakSentence inside the Gather verb will speak the text to the callee.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.Gather.PlayAudio">
            <summary>
            Using the PlayAudio inside the Gather verb will play the media to the callee.
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Xml.Verbs.Hangup">
            <summary>
              The Hangup verb is used to hangup current call.
            </summary>
            <seealso href="http://ap.bandwidth.com/docs/xml/hangup/" />
        </member>
        <member name="T:Bandwidth.Net.Xml.Verbs.Pause">
            <summary>
              Pause is a verb to specify the length of seconds to wait before executing the next verb.
            </summary>
            <seealso href="http://ap.bandwidth.com/docs/xml/pause/" />
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.Pause.Duration">
            <summary>
              Seconds to wait before continuing the execution
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Xml.Verbs.PlayAudio">
            <summary>
              The PlayAudio verb is used to play an audio file in the call.
            </summary>
            <seealso href="http://ap.bandwidth.com/docs/xml/playaudio/" />
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.PlayAudio.Digits">
            <summary>
              Allows you to play DTMF digits in the call
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.PlayAudio.Url">
            <summary>
              Url of media resourse to play
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Xml.Verbs.Record">
            <summary>
              The Record verb allow call recording.
            </summary>
            <seealso href="http://ap.bandwidth.com/docs/xml/record/" />
        </member>
        <member name="M:Bandwidth.Net.Xml.Verbs.Record.#ctor">
            <summary>
              Constructor
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.Record.RequestUrl">
            <summary>
              Relative or absolute URL to send event and request new BaML
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.Record.FileFormat">
            <summary>
              The format that the recording will be saved - mp3 or wav.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.Record.RequestUrlTimeout">
            <summary>
              The time in milliseconds to wait for requestUrl response
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.Record.TerminatingDigits">
            <summary>
              One or more digits that will finish the recording
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.Record.MaxDuration">
            <summary>
              The time in second for max recording duration
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.Record.Transcribe">
            <summary>
              A boolean value to indicate that recording must be transcribed
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.Record.TranscribeCallbackUrl">
            <summary>
              Relative or absolute URL to send transcribed event
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Xml.Verbs.Redirect">
            <summary>
              The Redirect verb is used to redirect the current XML execution to another URL.
            </summary>
            <seealso href="http://ap.bandwidth.com/docs/xml/redirect/" />
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.Redirect.RequestUrl">
            <summary>
              Relative or absolute URL to send event and request new BaML
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.Redirect.RequestUrlTimeout">
            <summary>
              The time in milliseconds to wait for requestUrl response
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.Redirect.Context">
            <summary>
              Specify any call Id or message Id where the redirect will be applied to.
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Xml.Verbs.Reject">
            <summary>
              The Reject verb is used to reject incoming calls
            </summary>
            <seealso href="http://ap.bandwidth.com/docs/xml/reject/" />
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.Reject.Reason">
            <summary>
              Describe the reason for rejecting the call (busy or rejected to play different tones to the caller)
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Xml.Verbs.SendMessage">
            <summary>
              The SendMessage is used to send a text message.
            </summary>
            <seealso href="http://ap.bandwidth.com/docs/xml/message/" />
        </member>
        <member name="M:Bandwidth.Net.Xml.Verbs.SendMessage.#ctor">
            <summary>
              Default constructor
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.SendMessage.From">
            <summary>
              The number from the message will be sent
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.SendMessage.To">
            <summary>
              The number to send the message to
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.SendMessage.RequestUrl">
            <summary>
              Relative or absolute URL to send event and request new BaML
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.SendMessage.RequestUrlTimeout">
            <summary>
              Integer time seconds to wait for requestUrl response
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.SendMessage.StatusCallbackUrl">
            <summary>
              Relative or absolute URL to send the message callback
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.SendMessage.Text">
            <summary>
              Text to send
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Xml.Verbs.SpeakSentence">
            <summary>
              The SpeakSentence verb is used to convert any text into speak for the caller.
            </summary>
            <seealso href="http://ap.bandwidth.com/docs/xml/speaksentence/" />
        </member>
        <member name="M:Bandwidth.Net.Xml.Verbs.SpeakSentence.#ctor">
            <summary>
              Default constructor
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.SpeakSentence.Gender">
            <summary>
              The gender of the speaker
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.SpeakSentence.Locale">
            <summary>
              The accent of the speaker
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.SpeakSentence.Voice">
            <summary>
              The voice of the speaker, limited by gender
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.SpeakSentence.Sentence">
            <summary>
              Sentence to speak
            </summary>
        </member>
        <member name="T:Bandwidth.Net.Xml.Verbs.Transfer">
            <summary>
              The Transfer verb is used to transfer the call to another number.
            </summary>
            <seealso href="http://ap.bandwidth.com/docs/xml/transfer/" />
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.Transfer.TransferTo">
            <summary>
              Defines the number the call will be transferred to
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.Transfer.TransferCallerId">
            <summary>
              This is the caller id that will be used when the call is transferred.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.Transfer.RequestUrl">
            <summary>
              Relative or absolute URL to send event and request new BaML when transferred call hangs up.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.Transfer.RequestUrlTimeout">
            <summary>
              Timeout (milliseconds) to request new BaML.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.Transfer.Tag">
            <summary>
              A string that will be included in the callback events of the conference
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.Transfer.CallTimeout">
            <summary>
              This is the timeout (seconds) for the callee to answer the call.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.Transfer.SpeakSentence">
            <summary>
              This will speak the text into the call before transferring it.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.Transfer.PlayAudio">
            <summary>
              Using the PlayAudio inside the Transfer verb will play the media to the callee before transferring it.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.Transfer.Record">
            <summary>
              Using Record inside Transfer verb will record the transferred call.
            </summary>
        </member>
        <member name="P:Bandwidth.Net.Xml.Verbs.Transfer.PhoneNumbers">
            <summary>
              A collection of phone numbers to transfer the call to. The first to answer will be transferred.
            </summary>
        </member>
    </members>
</doc>
